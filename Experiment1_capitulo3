{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e04af69",
   "metadata": {
    "papermill": {
     "duration": 0.004016,
     "end_time": "2025-03-04T20:07:19.021437",
     "exception": false,
     "start_time": "2025-03-04T20:07:19.017421",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d73dc4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:19.029317Z",
     "iopub.status.busy": "2025-03-04T20:07:19.029010Z",
     "iopub.status.idle": "2025-03-04T20:07:26.584409Z",
     "shell.execute_reply": "2025-03-04T20:07:26.583717Z"
    },
    "papermill": {
     "duration": 7.561176,
     "end_time": "2025-03-04T20:07:26.586017",
     "exception": false,
     "start_time": "2025-03-04T20:07:19.024841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import torch\n",
    "from PIL import Image\n",
    "from torchvision import transforms\n",
    "\n",
    "class HistogramEqualization:\n",
    "    \"\"\"Aplica ecualización de histograma para ajuste de contraste\"\"\"\n",
    "    def __call__(self, img):\n",
    "        # Convertir PIL Image a numpy array\n",
    "        img_np = np.array(img)\n",
    "        \n",
    "        # Aplicar ecualización de histograma por canal\n",
    "        if len(img_np.shape) == 3:  # Imagen RGB\n",
    "            img_eq = np.zeros_like(img_np)\n",
    "            for i in range(3):\n",
    "                img_eq[:,:,i] = cv2.equalizeHist(img_np[:,:,i])\n",
    "        else:  # Imagen en escala de grises\n",
    "            img_eq = cv2.equalizeHist(img_np)\n",
    "            \n",
    "        # Convertir de nuevo a PIL Image\n",
    "        return Image.fromarray(img_eq)\n",
    "\n",
    "class BilateralFilter:\n",
    "    \"\"\"Aplica filtrado bilateral para suavizado preservando bordes\"\"\"\n",
    "    def __init__(self, d=9, sigma_color=75, sigma_space=75):\n",
    "        self.d = d  # Diámetro de cada vecindario de píxeles\n",
    "        self.sigma_color = sigma_color  # Filtro sigma en el espacio de color\n",
    "        self.sigma_space = sigma_space  # Filtro sigma en el espacio de coordenadas\n",
    "    \n",
    "    def __call__(self, img):\n",
    "        # Convertir PIL Image a numpy array\n",
    "        img_np = np.array(img)\n",
    "        \n",
    "        # Aplicar filtro bilateral\n",
    "        img_filtered = cv2.bilateralFilter(\n",
    "            img_np, self.d, self.sigma_color, self.sigma_space)\n",
    "            \n",
    "        # Convertir de nuevo a PIL Image\n",
    "        return Image.fromarray(img_filtered)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1392a8ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:26.593601Z",
     "iopub.status.busy": "2025-03-04T20:07:26.593292Z",
     "iopub.status.idle": "2025-03-04T20:07:26.604180Z",
     "shell.execute_reply": "2025-03-04T20:07:26.603369Z"
    },
    "papermill": {
     "duration": 0.016085,
     "end_time": "2025-03-04T20:07:26.605505",
     "exception": false,
     "start_time": "2025-03-04T20:07:26.589420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class DatasetExperiment1(Dataset):\n",
    "    def __init__(self, mode='train', batch_size=32, local = False, path = ''):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            mode (str): 'train', 'val' o 'test'.\n",
    "            transform: Transformaciones de torchvision a aplicar a las imágenes.\n",
    "        \"\"\"\n",
    "        assert mode in ['train', 'val', 'test'], \"Mode must be 'train', 'val', or 'test'\"\n",
    "        if local:\n",
    "            print(\"LOCAL MODE ENABLED\")\n",
    "\n",
    "        # Transformaciones del paper\n",
    "        # Histogram equalization for contrast adjustment\n",
    "        # and bilateral filtering for smoothness\n",
    "        self.transform =  transforms.Compose([\n",
    "            transforms.Resize((224, 224)),\n",
    "            HistogramEqualization(),\n",
    "            BilateralFilter(d=9, sigma_color=75, sigma_space=75),\n",
    "            transforms.ToTensor(),\n",
    "        ])\n",
    "        self.data_path = os.path.join(path, mode)\n",
    "        self.classes = sorted(os.listdir(self.data_path))  # Lista de clases\n",
    "        self.data = []\n",
    "        self.batch_size = batch_size\n",
    "        # Cargar imágenes con sus etiquetas\n",
    "        \n",
    "\n",
    "        for label, class_name in enumerate(self.classes):\n",
    "            class_path = os.path.join(self.data_path, class_name)\n",
    "            i = 0\n",
    "            for img_name in os.listdir(class_path):\n",
    "                if local and i >= 3:\n",
    "                    break\n",
    "                img_path = os.path.join(class_path, img_name)\n",
    "                self.data.append((img_path, label))\n",
    "                i += 1\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        img_path, label = self.data[idx]\n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        \n",
    "        return image, label\n",
    "    \n",
    "    def get_dataloader(self, shuffle=True):       \n",
    "        return DataLoader(self, batch_size=self.batch_size, shuffle=shuffle)\n",
    "    def show_image(self, idx, transformed=True, figsize=(10, 8)):\n",
    "        \"\"\"\n",
    "        Muestra una imagen del dataset con su etiqueta\n",
    "        \n",
    "        Args:\n",
    "            idx (int): Índice de la imagen a mostrar\n",
    "            transformed (bool): Si es True, muestra la imagen transformada. \n",
    "                               Si es False, muestra la imagen original.\n",
    "            figsize (tuple): Tamaño de la figura (ancho, alto)\n",
    "        \"\"\"\n",
    "        if idx >= len(self):\n",
    "            print(f\"Índice {idx} fuera de rango. El dataset tiene {len(self)} elementos.\")\n",
    "            return\n",
    "        \n",
    "        img_path, label = self.data[idx]\n",
    "        class_name = self.classes[label]\n",
    "        \n",
    "        plt.figure(figsize=figsize)\n",
    "        \n",
    "        # Mostrar imagen original\n",
    "        orig_img = Image.open(img_path).convert('RGB')\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.imshow(orig_img)\n",
    "        plt.title(f\"Original: Clase {class_name} (label {label})\")\n",
    "        plt.axis('off')\n",
    "        \n",
    "        # Mostrar imagen transformada si se solicita\n",
    "        if transformed:\n",
    "            trans_img = self.transform(orig_img)\n",
    "            # Convertir tensor a numpy para visualización\n",
    "            if isinstance(trans_img, torch.Tensor):\n",
    "                trans_img = trans_img.permute(1, 2, 0).numpy()  # Cambiar de CxHxW a HxWxC\n",
    "                # Normalizar valores para visualización\n",
    "                trans_img = np.clip(trans_img, 0, 1)\n",
    "            \n",
    "            plt.subplot(1, 2, 2)\n",
    "            plt.imshow(trans_img)\n",
    "            plt.title(\"Con transformaciones aplicadas\")\n",
    "            plt.axis('off')\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "        \n",
    "        # Imprimir información adicional\n",
    "        print(f\"Ruta de la imagen: {img_path}\")\n",
    "        print(f\"Clase: {class_name} (label {label})\")\n",
    "        print(f\"Resolución original: {orig_img.size}\")\n",
    "        if transformed and isinstance(trans_img, np.ndarray):\n",
    "            print(f\"Resolución después de transformaciones: {trans_img.shape[:2]}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37668548",
   "metadata": {
    "papermill": {
     "duration": 0.00277,
     "end_time": "2025-03-04T20:07:26.611270",
     "exception": false,
     "start_time": "2025-03-04T20:07:26.608500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train config 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0203c599",
   "metadata": {
    "papermill": {
     "duration": 0.002722,
     "end_time": "2025-03-04T20:07:26.616928",
     "exception": false,
     "start_time": "2025-03-04T20:07:26.614206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The hyperparameters of the proposed ensemble model were\n",
    "tuned by the trial-and-error method. \n",
    "L2 regularization, \n",
    "batch normalization, \n",
    "dropout rate\n",
    "\n",
    "The Adam optimizer\n",
    "Epochs = 150. \n",
    "The learning rate scheduler and ReduceLROnPlateau were used for handling\n",
    "the learning rate with an initial value of 0.001. The loss\n",
    "function used for the model was categorical cross-entropy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93c0d413",
   "metadata": {
    "papermill": {
     "duration": 0.002721,
     "end_time": "2025-03-04T20:07:26.622621",
     "exception": false,
     "start_time": "2025-03-04T20:07:26.619900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d751a194",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:26.629486Z",
     "iopub.status.busy": "2025-03-04T20:07:26.629269Z",
     "iopub.status.idle": "2025-03-04T20:07:35.247981Z",
     "shell.execute_reply": "2025-03-04T20:07:35.247013Z"
    },
    "papermill": {
     "duration": 8.624081,
     "end_time": "2025-03-04T20:07:35.249593",
     "exception": false,
     "start_time": "2025-03-04T20:07:26.625512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install -q lightning\n",
    "import lightning.pytorch as pl\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchmetrics as tm\n",
    "from torchmetrics.classification import MulticlassConfusionMatrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "class Classification(pl.LightningModule):\n",
    "    \"\"\"\n",
    "    Trainer para entrenar un modelo de clasificación multiclase\n",
    "    y de dimension 1 con valores [0, num_classes]\n",
    "    \"\"\"\n",
    "    def __init__(self, model, device, L1=0.001, L2=0.001, lr=0.001, patience=5, factor=0.1, betas=(0.9, 0.999)):\n",
    "        super().__init__()\n",
    "        self.save_hyperparameters(ignore=(\"model\",))\n",
    "\n",
    "        self.model = model\n",
    "\n",
    "        self.loss_fn = nn.CrossEntropyLoss()\n",
    "        self.L1 = L1\n",
    "        self.L2 = L2\n",
    "        self.learning_rate = lr\n",
    "        self.patience = patience\n",
    "        self.factor = factor\n",
    "        self.betas = betas\n",
    "\n",
    "        self.num_classes = 5\n",
    "        self.confusion_matrix = MulticlassConfusionMatrix(num_classes=5).to(device)\n",
    "        self.auc_metric = tm.AUROC(num_classes=5, task=\"multiclass\").to(device)  # Definir métrica AUROC para clasificación multiclase\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "    def training_step(self, x, y):\n",
    "        y = y\n",
    "        y_hat = self.model(x)\n",
    "        y_oh = self.transform_classes(y)\n",
    "        loss = self.loss_fn(y_hat, y_oh)\n",
    "        \n",
    "        # Regularización L1\n",
    "        L1_reg = torch.tensor(0., requires_grad=True)\n",
    "        for param in self.model.parameters():\n",
    "            L1_reg = L1_reg + torch.sum(torch.abs(param))\n",
    "        \n",
    "        # Regularización L2\n",
    "        L2_reg = torch.tensor(0., requires_grad=True)\n",
    "        for param in self.model.parameters():\n",
    "            L2_reg = L2_reg + torch.sum(param ** 2)\n",
    "        \n",
    "        # Añadir regularización a la pérdida\n",
    "        prediction_loss = loss\n",
    "        loss = loss + self.L1 * L1_reg + self.L2 * L2_reg\n",
    "        # Obtener la clase predicha\n",
    "        y_pred = torch.argmax(y_hat, dim=1)\n",
    "        # Calcular métricas\n",
    "        loss.backward()\n",
    "        self.confusion_matrix.update(y_pred, y)\n",
    "        self.auc_metric.update(y_hat, y)\n",
    "\n",
    "        precision, recall, f1_score, ACC, AUC, specificity = self.calculate_metrics_from_confusion_matrix()\n",
    "\n",
    "        return {\"loss\": prediction_loss, \"real_loss\": loss, \"ACC\": ACC, \"recall\": recall, \"precision\": precision, \"f1_score\": f1_score, \"AUC\": AUC, \"specificity\": specificity}\n",
    "\n",
    "    def validation_step(self, x, y):\n",
    "        y = y\n",
    "        y_hat = self.model(x)\n",
    "        y_oh = self.transform_classes(y)\n",
    "        loss = self.loss_fn(y_hat, y_oh)\n",
    "        # Obtener la clase predicha\n",
    "        y_pred = torch.argmax(y_hat, dim=1)\n",
    "        # Calcular métricas\n",
    "        self.confusion_matrix.update(y_pred, y)\n",
    "        self.auc_metric.update(y_hat, y)\n",
    "\n",
    "        precision, recall, f1_score, ACC, AUC, specificity = self.calculate_metrics_from_confusion_matrix()\n",
    "        return {\"loss\": loss, \"ACC\": ACC, \"precision\" : precision, \"recall\": recall, \"f1_score\" : f1_score, \"AUC\": AUC, \"specificity\": specificity}\n",
    "\n",
    "    def transform_classes(self, y):\n",
    "        # Convertir las clases a un formato de one-hot encoding\n",
    "        return torch.nn.functional.one_hot(y.to(torch.int64), num_classes=5).to(float).squeeze()\n",
    "    def restart_epoch(self, plot = False):\n",
    "        if plot:\n",
    "            self.plot()\n",
    "        self.confusion_matrix.reset()\n",
    "        self.auc_metric.reset()\n",
    "    def calculate_metrics_from_confusion_matrix(self):\n",
    "        # Obtener la matriz de confusión (suponiendo que es un tensor de torch)\n",
    "        cm = self.confusion_matrix.compute()\n",
    "        total_samples = cm.sum()\n",
    "        \n",
    "        # Verdaderos positivos por clase (diagonal de la matriz)\n",
    "        true_positives = torch.diag(cm)\n",
    "        \n",
    "        # Predicciones totales por clase (sumar columnas)\n",
    "        predicted_positives = cm.sum(dim=0)\n",
    "        \n",
    "        # Ejemplos reales por clase (sumar filas)\n",
    "        actual_positives = cm.sum(dim=1)\n",
    "        \n",
    "        # Calcular falsos positivos y falsos negativos por clase\n",
    "        false_positives = predicted_positives - true_positives\n",
    "        false_negatives = actual_positives - true_positives\n",
    "        \n",
    "        # Calcular verdaderos negativos por clase\n",
    "        true_negatives = total_samples - (actual_positives + predicted_positives - true_positives)\n",
    "        \n",
    "        # Calcular métricas por clase con robustez para evitar división por cero\n",
    "        precision_per_class = true_positives / (predicted_positives + 1e-8)\n",
    "        recall_per_class = true_positives / (actual_positives + 1e-8)\n",
    "        specificity_per_class = true_negatives / (true_negatives + false_positives + 1e-8)\n",
    "        f1_per_class = 2 * (precision_per_class * recall_per_class) / (precision_per_class + recall_per_class + 1e-8)\n",
    "        \n",
    "        # Promediar las métricas por clase\n",
    "        precision = precision_per_class.mean()\n",
    "        recall = recall_per_class.mean()\n",
    "        specificity = specificity_per_class.mean()\n",
    "        f1 = f1_per_class.mean()\n",
    "        \n",
    "        # Calcular Accuracy (exactitud)\n",
    "        ACC = true_positives.sum() / total_samples\n",
    "        \n",
    "        # Calcular el AUC (suponiendo que self.auc_metric ya está correctamente definido)\n",
    "        AUC = self.auc_metric.compute()\n",
    "        \n",
    "        return precision, recall, f1, ACC, AUC, specificity\n",
    "\n",
    "\n",
    "    def configure_optimizers(self):\n",
    "        optimizer = torch.optim.Adam(self.model.parameters(),\n",
    "                                     lr=self.learning_rate,\n",
    "                                     betas=self.betas)\n",
    "        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer,\n",
    "                                                               factor=self.factor,\n",
    "                                                               patience=self.patience)\n",
    "        return optimizer, scheduler\n",
    "    def plot(self, epoch=0):\n",
    "        # Computa la matriz de confusión y las métricas por clase\n",
    "        cm = self.confusion_matrix.compute().cpu().numpy()\n",
    "        support = cm.sum(axis=1)\n",
    "        precision_per_class = np.diag(cm) / (cm.sum(axis=0) + 1e-8)\n",
    "        recall_per_class = np.diag(cm) / (cm.sum(axis=1) + 1e-8)\n",
    "        f1_per_class = 2 * (precision_per_class * recall_per_class) / (precision_per_class + recall_per_class + 1e-8)\n",
    "        \n",
    "        # Cálculo de especificidad por clase\n",
    "        FP = cm.sum(axis=0) - np.diag(cm)\n",
    "        FN = cm.sum(axis=1) - np.diag(cm)\n",
    "        TN = cm.sum() - (FP + FN + np.diag(cm))\n",
    "        specificity_per_class = TN / (TN + FP + 1e-8)\n",
    "        \n",
    "        accuracy = np.diag(cm).sum() / cm.sum()\n",
    "\n",
    "        # Crea dos subplots: uno para la matriz de confusión y otro para la tabla de métricas\n",
    "        fig, axs = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "        # Subplot 1: Matriz de confusión con heatmap\n",
    "        sns.heatmap(cm, annot=True, fmt=\"d\", ax=axs[0], cmap=\"Blues\")\n",
    "        axs[0].set_title(\"Matriz de Confusión epoch \" + str(epoch))\n",
    "        axs[0].set_xlabel(\"Predicción\")\n",
    "        axs[0].set_ylabel(\"Real\")\n",
    "\n",
    "        # Subplot 2: Tabla de métricas por clase\n",
    "        table_data = []\n",
    "        for i in range(self.num_classes):\n",
    "            table_data.append([f\"Clase {i}\",\n",
    "                            f\"{precision_per_class[i]:.2f}\",\n",
    "                            f\"{recall_per_class[i]:.2f}\",\n",
    "                            f\"{f1_per_class[i]:.2f}\",\n",
    "                            f\"{specificity_per_class[i]:.2f}\",\n",
    "                            int(support[i])])\n",
    "        axs[1].axis('tight')\n",
    "        axs[1].axis('off')\n",
    "        table = axs[1].table(cellText=table_data,\n",
    "                            colLabels=[\"Clase\", \"Precision\", \"Sensivity/Recall\", \"F1\", \"Specificity\", \"Support\"],\n",
    "                            cellLoc=\"center\", loc=\"center\")\n",
    "        axs[1].set_title(f\"Metrics por clase\\nAccuracy General: {accuracy:.2f}\", pad=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "609d871f",
   "metadata": {
    "papermill": {
     "duration": 0.003024,
     "end_time": "2025-03-04T20:07:35.256114",
     "exception": false,
     "start_time": "2025-03-04T20:07:35.253090",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ae58542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:35.263267Z",
     "iopub.status.busy": "2025-03-04T20:07:35.262826Z",
     "iopub.status.idle": "2025-03-04T20:07:35.269444Z",
     "shell.execute_reply": "2025-03-04T20:07:35.268816Z"
    },
    "papermill": {
     "duration": 0.011481,
     "end_time": "2025-03-04T20:07:35.270577",
     "exception": false,
     "start_time": "2025-03-04T20:07:35.259096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "import torchvision.models as models\n",
    "\n",
    "class ResNet50Model(nn.Module):\n",
    "    \"\"\"\n",
    "    Modelo basado en ResNet50 para la clasificación de radiografías.\n",
    "    Permite personalización en el número de clases y si se usa transfer learning.\n",
    "    \"\"\"\n",
    "    def __init__(self, num_classes=5, pretrained=True, freeze_backbone=False, dropout_rate=0.3):\n",
    "        \"\"\"\n",
    "        Inicializa el modelo ResNet50.\n",
    "        \n",
    "        Args:\n",
    "            num_classes (int): Número de clases para la clasificación (default: 5)\n",
    "            pretrained (bool): Si se deben usar pesos preentrenados en ImageNet (default: True)\n",
    "            freeze_backbone (bool): Si se deben congelar las capas de la red base (default: False)\n",
    "            dropout_rate (float): Tasa de dropout aplicada antes de la capa de clasificación (default: 0.3)\n",
    "        \"\"\"\n",
    "        super(ResNet50Model, self).__init__()\n",
    "        \n",
    "        # Cargar el modelo base ResNet50\n",
    "        self.model = models.resnet50(weights='IMAGENET1K_V2' if pretrained else None)\n",
    "        \n",
    "        # Nombre del modelo para identificación\n",
    "        self.name = \"ResNet50\"\n",
    "        \n",
    "        # Congelar los parámetros de la red si se especifica\n",
    "        if freeze_backbone:\n",
    "            for param in self.model.parameters():\n",
    "                param.requires_grad = False\n",
    "        \n",
    "        # Reemplazar la capa de clasificación final\n",
    "        in_features = self.model.fc.in_features\n",
    "        self.model.fc = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(in_features, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(512, num_classes)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Propagación hacia adelante a través del modelo.\n",
    "        \n",
    "        Args:\n",
    "            x: Tensor de entrada con forma [batch_size, channels, height, width]\n",
    "            \n",
    "        Returns:\n",
    "            Tensor con las predicciones de clase [batch_size, num_classes]\n",
    "        \"\"\"\n",
    "        return self.model(x)\n",
    "    \n",
    "    def get_features(self, x):\n",
    "        \"\"\"\n",
    "        Obtiene los features del modelo antes de la capa de clasificación.\n",
    "        Útil para análisis de características o transferencia de estilo.\n",
    "        \n",
    "        Args:\n",
    "            x: Tensor de entrada con forma [batch_size, channels, height, width]\n",
    "            \n",
    "        Returns:\n",
    "            Tensor de características [batch_size, 2048]\n",
    "        \"\"\"\n",
    "        # Extrae todas las capas excepto la final\n",
    "        modules = list(self.model.children())[:-1]\n",
    "        feature_extractor = nn.Sequential(*modules)\n",
    "        \n",
    "        # Obtiene los features y los aplana\n",
    "        features = feature_extractor(x)\n",
    "        features = features.view(features.size(0), -1)\n",
    "        \n",
    "        return features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0885a8b3",
   "metadata": {
    "papermill": {
     "duration": 0.002886,
     "end_time": "2025-03-04T20:07:35.276551",
     "exception": false,
     "start_time": "2025-03-04T20:07:35.273665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fabb6ed3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:35.283518Z",
     "iopub.status.busy": "2025-03-04T20:07:35.283299Z",
     "iopub.status.idle": "2025-03-04T20:07:37.138991Z",
     "shell.execute_reply": "2025-03-04T20:07:37.138300Z"
    },
    "papermill": {
     "duration": 1.860902,
     "end_time": "2025-03-04T20:07:37.140543",
     "exception": false,
     "start_time": "2025-03-04T20:07:35.279641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from tqdm import tqdm\n",
    "from wandb import wandb\n",
    "\n",
    "def create_tqdm_bar(iterable, desc, mode):\n",
    "    return tqdm(enumerate(iterable),total=len(iterable), ncols=200, desc=desc)\n",
    "\n",
    "def train_model(model, trainer, train_dataset, val_dataset, epochs=5, transform=None, device='cuda', save_model = \"\", name=\"Test\", wdb=True, local=False, project=\"oai-knee-cartilage-segmentation\"):\n",
    "    if wdb:\n",
    "        if wandb.run is not None:\n",
    "            wandb.finish()\n",
    "        wandb.init(\n",
    "            project=project,\n",
    "            name=name,\n",
    "            # track hyperparameters and run metadata\n",
    "            config={\n",
    "                \"model\": model.name,\n",
    "                \"Batch_size\": train_dataset.batch_size,\n",
    "                \"learning_rate\": trainer.learning_rate,\n",
    "                \"L1\": trainer.L1,\n",
    "                \"L2\": trainer.L2,\n",
    "                \"patience\": trainer.patience,\n",
    "                \"factor\": trainer.factor,\n",
    "                \"betas\": trainer.betas,\n",
    "                \"epochs\": epochs,\n",
    "            }\n",
    "        )\n",
    "    train_loader = train_dataset.get_dataloader(shuffle=True)\n",
    "    val_loader = val_dataset.get_dataloader(shuffle=True)\n",
    "    model.to(device)\n",
    "    train(model, train_loader, val_loader, trainer, epochs, device, wdb, local = local, save_model = save_model)\n",
    "    \n",
    "\n",
    "def train(model, train_loader, val_loader, trainer, epochs, device, wdb, local = False, save_model = \"\"):\n",
    "    \"\"\"\n",
    "    train the given model\n",
    "    \"\"\"\n",
    "    optimizer, scheduler = trainer.configure_optimizers()\n",
    "    best_model = None\n",
    "    best_loss = float('inf')\n",
    "    for epoch in range(epochs):        \n",
    "        training_loss = []\n",
    "        validation_loss = []\n",
    "\n",
    "        training_loss_num = 0\n",
    "        complete_loss_num = 0\n",
    "        validation_loss_num = 0\n",
    "\n",
    "        # use training data\n",
    "        model.train()\n",
    "\n",
    "        training_loop = create_tqdm_bar(train_loader, desc=f'Training Epoch [{epoch + 1}/{epochs}]', mode='train')\n",
    "        for train_iteration, batch in training_loop:\n",
    "            batch = batch[0].to(device), batch[1].to(device)\n",
    "            optimizer.zero_grad()\n",
    "            res = trainer.training_step(batch[0], batch[1])\n",
    "            optimizer.step()\n",
    "\n",
    "            training_loss.append(res['loss'].item())\n",
    "            training_loss_num += res['loss'].item()\n",
    "            complete_loss_num += res['real_loss'].item()\n",
    "            # Update the progress bar.\n",
    "            training_loop.set_postfix(train_loss=\"{:.4f}\".format(training_loss_num / (train_iteration + 1)),\n",
    "                                      complete_loss=\"{:.4f}\".format(complete_loss_num / (train_iteration + 1)),\n",
    "                                      acc=res['ACC'].item(),\n",
    "                                      AUC=res['AUC'].item(),\n",
    "                                      sensivity=res['recall'].item(),\n",
    "                                      specificity=res['specificity'].item())\n",
    "            if wdb:\n",
    "                \n",
    "                wandb.log({\"train_loss\": training_loss_num / (train_iteration + 1),\n",
    "                           \"complete_loss\": complete_loss_num / (train_iteration + 1),\n",
    "                        \"train_acc\": res['ACC'],\n",
    "                        \"train_recall\": res['recall'].item(),\n",
    "                        \"train_precision\": res['precision'].item(),\n",
    "                        \"train_specifity\": res['specificity'].item(),\n",
    "                        \"train_f1_score\": res['f1_score'].item(),\n",
    "                        \"train_AUC\": res['AUC'],\n",
    "                        \"epoch\": epoch,\n",
    "                        \"learning_rate\": optimizer.param_groups[0]['lr']})\n",
    "        trainer.restart_epoch(plot=False)\n",
    "        # use validation data\n",
    "        if local:\n",
    "            continue\n",
    "        model.eval()\n",
    "        val_loop = create_tqdm_bar(val_loader, desc=f'Validation Epoch [{epoch + 1}/{epochs}]', mode='val')\n",
    "        with torch.no_grad():\n",
    "            for val_iteration, batch in val_loop:\n",
    "                batch = batch[0].to(device), batch[1].to(device)\n",
    "                res = trainer.validation_step(batch[0], batch[1])  \n",
    "                validation_loss.append(res['loss'].item())\n",
    "                validation_loss_num += res['loss'].item()\n",
    "                val_loop.set_postfix(val_loss = \"{:.8f}\".format(validation_loss_num / (val_iteration + 1)),\n",
    "                                      acc=res['ACC'].item(),\n",
    "                                      AUC=res['AUC'].item(),\n",
    "                                      specificity=res['specificity'].item())\n",
    "                                      \n",
    "        if wdb:\n",
    "            wandb.log({\"val_loss\": validation_loss_num / (val_iteration + 1),\n",
    "                    \"val_acc\": res['ACC'],\n",
    "                    \"val_recall\": res['recall'].item(),\n",
    "                    \"val_precision\": res['precision'].item(),\n",
    "                    \"val_specificity\": res['specificity'].item(),\n",
    "                    \"val_f1_score\": res['f1_score'].item(),\n",
    "                    \"val_AUC\": res['AUC'],\n",
    "                    \"epoch\": epoch,\n",
    "                    \"learning_rate\": optimizer.param_groups[0]['lr']})\n",
    "        if validation_loss_num < best_loss:\n",
    "            best_loss = validation_loss_num\n",
    "            if save_model != \"\":\n",
    "                torch.save(model.state_dict(), f\"best_model_{model.__class__.__name__}_{save_model}_epoch_{epoch}.pt\")\n",
    "        scheduler.step(res['loss'].item())\n",
    "        trainer.restart_epoch(plot=False)\n",
    "    \n",
    "    test_model(model, val_loader, trainer, device, wdb)\n",
    "\n",
    "def test_model(model, test_loader, trainer, device, wdb=False):\n",
    "    \"\"\"\n",
    "    Test the given model\n",
    "    \"\"\"\n",
    "    model.eval()\n",
    "    model.to(device)\n",
    "\n",
    "    epoch_loss = 0.0\n",
    "    avg_loss = 0.0\n",
    "    trainer.restart_epoch(plot = False)\n",
    "    for batch in test_loader:\n",
    "        inputs, labels = batch\n",
    "        inputs = inputs.to(device)\n",
    "        \n",
    "        labels = labels.to(device)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            res = trainer.validation_step(inputs, labels)\n",
    "            # Extraer valores escalares\n",
    "            loss = res['loss']\n",
    "            \n",
    "        loss_value = loss.item()\n",
    "        # Calcular promedios\n",
    "        epoch_loss += loss_value\n",
    "\n",
    "    ACC_value = res['ACC']\n",
    "    recall_value = res['recall'].item()\n",
    "    precision_value = res['precision'].item()\n",
    "    f1_score_value = res['f1_score'].item()\n",
    "    AUC_value = res['AUC']\n",
    "    avg_loss = epoch_loss / len(test_loader)\n",
    "    if wdb:\n",
    "        wandb.log({\"test_loss\": avg_loss, \"test_acc\": ACC_value.item(),\n",
    "                \"test_recall\": recall_value, \"test_precision\": precision_value,\n",
    "                \"test_f1_score\": f1_score_value, \"test_AUC\" : AUC_value})\n",
    "    \n",
    "    print(f\"Test model {model.__class__.__name__} - Loss: {avg_loss:.2f}, ACC: {ACC_value:.2f}, AUC: {AUC_value:.2f}, Sensivility: {recall_value:.2f}, Specificity: {precision_value:.2f}\")\n",
    "\n",
    "    trainer.restart_epoch(plot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "11c5c1b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:37.148075Z",
     "iopub.status.busy": "2025-03-04T20:07:37.147809Z",
     "iopub.status.idle": "2025-03-04T20:07:38.816910Z",
     "shell.execute_reply": "2025-03-04T20:07:38.816216Z"
    },
    "papermill": {
     "duration": 1.674674,
     "end_time": "2025-03-04T20:07:38.818561",
     "exception": false,
     "start_time": "2025-03-04T20:07:37.143887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/resnet50-11ad3fa6.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-11ad3fa6.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 220MB/s]\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms\n",
    "import matplotlib.pyplot as plt\n",
    "BATCH_SIZE = 64\n",
    "LEARNING_RATE = 0.001\n",
    "FACTOR = 0.1\n",
    "L1 = 0.00\n",
    "L2 = 0.002\n",
    "PATIENCE = 5\n",
    "BETAS=(0.9, 0.999)\n",
    "DATASET_PATH = '/kaggle/input/aug-oai-capitulo3/augmented_oai'\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "train_dataset = DatasetExperiment1('train', batch_size=BATCH_SIZE, local=False, path = DATASET_PATH)\n",
    "val_dataset = DatasetExperiment1('val', batch_size=BATCH_SIZE, local=False, path = DATASET_PATH)\n",
    "\n",
    "model = ResNet50Model(num_classes=len(train_dataset.classes), dropout_rate=0.5)\n",
    "trainer = Classification(model, device, L1=L1, L2=L2, lr=LEARNING_RATE, patience=PATIENCE, factor=FACTOR, betas=BETAS)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "21f38845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:38.826966Z",
     "iopub.status.busy": "2025-03-04T20:07:38.826657Z",
     "iopub.status.idle": "2025-03-04T20:07:39.512921Z",
     "shell.execute_reply": "2025-03-04T20:07:39.512086Z"
    },
    "papermill": {
     "duration": 0.691811,
     "end_time": "2025-03-04T20:07:39.514327",
     "exception": false,
     "start_time": "2025-03-04T20:07:38.822516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mchermar\u001b[0m (\u001b[33mchermar-universitat-polit-cnica-de-val-ncia\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wandb.login(key=\"254f72e7bdeec44797ba1b2a91ebbc63900b89f4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "402daaf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-04T20:07:39.523037Z",
     "iopub.status.busy": "2025-03-04T20:07:39.522745Z",
     "iopub.status.idle": "2025-03-05T01:31:47.188778Z",
     "shell.execute_reply": "2025-03-05T01:31:47.187974Z"
    },
    "papermill": {
     "duration": 19447.672087,
     "end_time": "2025-03-05T01:31:47.190421",
     "exception": false,
     "start_time": "2025-03-04T20:07:39.518334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250304_200739-7whua3xw\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mExperimento1.3\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/chermar-universitat-polit-cnica-de-val-ncia/oai-knee-cartilage-segmentation\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/chermar-universitat-polit-cnica-de-val-ncia/oai-knee-cartilage-segmentation/runs/7whua3xw\u001b[0m\n",
      "Training Epoch [1/40]: 100%|██████████████████████████████████████| 459/459 [11:05<00:00,  1.45s/it, AUC=0.729, acc=0.48, complete_loss=384.3733, sensivity=0.334, specificity=0.842, train_loss=1.2240]\n",
      "Validation Epoch [1/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:14<00:00,  1.09s/it, AUC=0.628, acc=0.288, specificity=0.824, val_loss=2.39083049]\n",
      "Training Epoch [2/40]: 100%|█████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.725, acc=0.486, complete_loss=261.9846, sensivity=0.349, specificity=0.844, train_loss=1.2170]\n",
      "Validation Epoch [2/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.34it/s, AUC=0.612, acc=0.403, specificity=0.804, val_loss=1.74131858]\n",
      "Training Epoch [3/40]: 100%|█████████████████████████████████████| 459/459 [08:00<00:00,  1.05s/it, AUC=0.743, acc=0.498, complete_loss=179.7343, sensivity=0.356, specificity=0.848, train_loss=1.1852]\n",
      "Validation Epoch [3/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.37it/s, AUC=0.708, acc=0.312, specificity=0.821, val_loss=1.39809777]\n",
      "Training Epoch [4/40]: 100%|█████████████████████████████████████| 459/459 [07:58<00:00,  1.04s/it, AUC=0.751, acc=0.504, complete_loss=122.2557, sensivity=0.362, specificity=0.851, train_loss=1.1726]\n",
      "Validation Epoch [4/40]:   0%|                                                                                                                                                   | 0/13 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torchmetrics/utilities/prints.py:43: UserWarning: No positive samples in targets, true positive value should be meaningless. Returning zero tensor in true positive score\n",
      "  warnings.warn(*args, **kwargs)  # noqa: B028\n",
      "Validation Epoch [4/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.32it/s, AUC=0.663, acc=0.286, specificity=0.806, val_loss=1.40417269]\n",
      "Training Epoch [5/40]: 100%|███████████████████████████████████████| 459/459 [07:54<00:00,  1.03s/it, AUC=0.76, acc=0.515, complete_loss=82.2822, sensivity=0.371, specificity=0.854, train_loss=1.1534]\n",
      "Validation Epoch [5/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.37it/s, AUC=0.763, acc=0.388, specificity=0.831, val_loss=1.27784880]\n",
      "Training Epoch [6/40]: 100%|███████████████████████████████████████| 459/459 [07:53<00:00,  1.03s/it, AUC=0.768, acc=0.526, complete_loss=54.8431, sensivity=0.38, specificity=0.857, train_loss=1.1340]\n",
      "Validation Epoch [6/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.38it/s, AUC=0.696, acc=0.305, specificity=0.814, val_loss=1.40051009]\n",
      "Training Epoch [7/40]: 100%|██████████████████████████████████████| 459/459 [07:51<00:00,  1.03s/it, AUC=0.773, acc=0.524, complete_loss=36.3478, sensivity=0.381, specificity=0.857, train_loss=1.1240]\n",
      "Validation Epoch [7/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.735, acc=0.485, specificity=0.837, val_loss=1.32699087]\n",
      "Training Epoch [8/40]: 100%|███████████████████████████████████████| 459/459 [07:57<00:00,  1.04s/it, AUC=0.778, acc=0.535, complete_loss=24.1320, sensivity=0.39, specificity=0.861, train_loss=1.1114]\n",
      "Validation Epoch [8/40]: 100%|██████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.38it/s, AUC=0.635, acc=0.395, specificity=0.8, val_loss=3.83687624]\n",
      "Training Epoch [9/40]: 100%|██████████████████████████████████████| 459/459 [07:59<00:00,  1.05s/it, AUC=0.783, acc=0.538, complete_loss=16.2446, sensivity=0.394, specificity=0.862, train_loss=1.0986]\n",
      "Validation Epoch [9/40]: 100%|█████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.735, acc=0.324, specificity=0.82, val_loss=1.40666647]\n",
      "Training Epoch [10/40]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.805, acc=0.56, complete_loss=13.0652, sensivity=0.413, specificity=0.868, train_loss=1.0467]\n",
      "Validation Epoch [10/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.824, acc=0.585, specificity=0.876, val_loss=1.00671133]\n",
      "Training Epoch [11/40]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.814, acc=0.569, complete_loss=12.5132, sensivity=0.42, specificity=0.871, train_loss=1.0210]\n",
      "Validation Epoch [11/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.824, acc=0.585, specificity=0.878, val_loss=1.00933752]\n",
      "Training Epoch [12/40]: 100%|█████████████████████████████████████| 459/459 [07:49<00:00,  1.02s/it, AUC=0.817, acc=0.573, complete_loss=11.9549, sensivity=0.424, specificity=0.873, train_loss=1.0121]\n",
      "Validation Epoch [12/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.805, acc=0.522, specificity=0.866, val_loss=1.10757135]\n",
      "Training Epoch [13/40]: 100%|█████████████████████████████████████| 459/459 [07:50<00:00,  1.02s/it, AUC=0.822, acc=0.578, complete_loss=11.3839, sensivity=0.429, specificity=0.874, train_loss=1.0002]\n",
      "Validation Epoch [13/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.833, acc=0.587, specificity=0.876, val_loss=0.98497040]\n",
      "Training Epoch [14/40]: 100%|█████████████████████████████████████| 459/459 [07:51<00:00,  1.03s/it, AUC=0.824, acc=0.579, complete_loss=10.8218, sensivity=0.432, specificity=0.875, train_loss=0.9925]\n",
      "Validation Epoch [14/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.821, acc=0.571, specificity=0.868, val_loss=1.01970613]\n",
      "Training Epoch [15/40]: 100%|█████████████████████████████████████| 459/459 [07:49<00:00,  1.02s/it, AUC=0.828, acc=0.585, complete_loss=10.2772, sensivity=0.437, specificity=0.876, train_loss=0.9850]\n",
      "Validation Epoch [15/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.818, acc=0.573, specificity=0.87, val_loss=1.01301105]\n",
      "Training Epoch [16/40]: 100%|██████████████████████████████████████| 459/459 [07:46<00:00,  1.02s/it, AUC=0.832, acc=0.589, complete_loss=9.7563, sensivity=0.445, specificity=0.878, train_loss=0.9739]\n",
      "Validation Epoch [16/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.838, acc=0.581, specificity=0.876, val_loss=0.96368660]\n",
      "Training Epoch [17/40]: 100%|██████████████████████████████████████| 459/459 [07:45<00:00,  1.01s/it, AUC=0.834, acc=0.592, complete_loss=9.2750, sensivity=0.448, specificity=0.879, train_loss=0.9685]\n",
      "Validation Epoch [17/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.838, acc=0.592, specificity=0.882, val_loss=0.97022053]\n",
      "Training Epoch [18/40]: 100%|████████████████████████████████████████| 459/459 [07:56<00:00,  1.04s/it, AUC=0.838, acc=0.596, complete_loss=8.8252, sensivity=0.46, specificity=0.88, train_loss=0.9574]\n",
      "Validation Epoch [18/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.834, acc=0.587, specificity=0.88, val_loss=0.99462712]\n",
      "Training Epoch [19/40]: 100%|████████████████████████████████████████| 459/459 [07:44<00:00,  1.01s/it, AUC=0.841, acc=0.6, complete_loss=8.4158, sensivity=0.468, specificity=0.881, train_loss=0.9479]\n",
      "Validation Epoch [19/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.806, acc=0.526, specificity=0.852, val_loss=1.10628079]\n",
      "Training Epoch [20/40]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.842, acc=0.606, complete_loss=8.0447, sensivity=0.481, specificity=0.883, train_loss=0.9394]\n",
      "Validation Epoch [20/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.818, acc=0.551, specificity=0.871, val_loss=1.02785829]\n",
      "Training Epoch [21/40]: 100%|██████████████████████████████████████| 459/459 [07:50<00:00,  1.02s/it, AUC=0.846, acc=0.605, complete_loss=7.7100, sensivity=0.483, specificity=0.883, train_loss=0.9317]\n",
      "Validation Epoch [21/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.39it/s, AUC=0.836, acc=0.596, specificity=0.88, val_loss=0.95398687]\n",
      "Training Epoch [22/40]: 100%|███████████████████████████████████████| 459/459 [07:47<00:00,  1.02s/it, AUC=0.848, acc=0.612, complete_loss=7.4062, sensivity=0.49, specificity=0.885, train_loss=0.9222]\n",
      "Validation Epoch [22/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.841, acc=0.605, specificity=0.879, val_loss=0.95173583]\n",
      "Training Epoch [23/40]: 100%|██████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.852, acc=0.618, complete_loss=7.1308, sensivity=0.498, specificity=0.887, train_loss=0.9115]\n",
      "Validation Epoch [23/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.43it/s, AUC=0.842, acc=0.595, specificity=0.881, val_loss=0.95993700]\n",
      "Training Epoch [24/40]: 100%|████████████████████████████████████████| 459/459 [07:52<00:00,  1.03s/it, AUC=0.854, acc=0.619, complete_loss=6.8875, sensivity=0.5, specificity=0.887, train_loss=0.9063]\n",
      "Validation Epoch [24/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.36it/s, AUC=0.827, acc=0.583, specificity=0.87, val_loss=1.01559042]\n",
      "Training Epoch [25/40]: 100%|██████████████████████████████████████| 459/459 [07:55<00:00,  1.04s/it, AUC=0.856, acc=0.625, complete_loss=6.6639, sensivity=0.512, specificity=0.889, train_loss=0.8972]\n",
      "Validation Epoch [25/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.44it/s, AUC=0.829, acc=0.564, specificity=0.879, val_loss=1.05762246]\n",
      "Training Epoch [26/40]: 100%|███████████████████████████████████████| 459/459 [07:49<00:00,  1.02s/it, AUC=0.859, acc=0.629, complete_loss=6.4597, sensivity=0.516, specificity=0.89, train_loss=0.8869]\n",
      "Validation Epoch [26/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.42it/s, AUC=0.825, acc=0.576, specificity=0.869, val_loss=1.01214158]\n",
      "Training Epoch [27/40]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.862, acc=0.631, complete_loss=6.2777, sensivity=0.523, specificity=0.891, train_loss=0.8808]\n",
      "Validation Epoch [27/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.37it/s, AUC=0.778, acc=0.472, specificity=0.862, val_loss=1.64492033]\n",
      "Training Epoch [28/40]: 100%|██████████████████████████████████████| 459/459 [07:51<00:00,  1.03s/it, AUC=0.872, acc=0.648, complete_loss=6.1542, sensivity=0.533, specificity=0.895, train_loss=0.8484]\n",
      "Validation Epoch [28/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.844, acc=0.621, specificity=0.886, val_loss=0.94500008]\n",
      "Training Epoch [29/40]: 100%|██████████████████████████████████████| 459/459 [07:55<00:00,  1.04s/it, AUC=0.877, acc=0.657, complete_loss=6.1233, sensivity=0.545, specificity=0.898, train_loss=0.8333]\n",
      "Validation Epoch [29/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.842, acc=0.615, specificity=0.884, val_loss=0.95254453]\n",
      "Training Epoch [30/40]: 100%|██████████████████████████████████████| 459/459 [07:58<00:00,  1.04s/it, AUC=0.878, acc=0.659, complete_loss=6.0989, sensivity=0.549, specificity=0.899, train_loss=0.8249]\n",
      "Validation Epoch [30/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.31it/s, AUC=0.844, acc=0.614, specificity=0.886, val_loss=0.93571654]\n",
      "Training Epoch [31/40]: 100%|█████████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.88, acc=0.661, complete_loss=6.0786, sensivity=0.554, specificity=0.9, train_loss=0.8208]\n",
      "Validation Epoch [31/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.838, acc=0.614, specificity=0.883, val_loss=0.93756145]\n",
      "Training Epoch [32/40]: 100%|█████████████████████████████████████████| 459/459 [07:49<00:00,  1.02s/it, AUC=0.88, acc=0.664, complete_loss=6.0617, sensivity=0.561, specificity=0.9, train_loss=0.8200]\n",
      "Validation Epoch [32/40]: 100%|█████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.38it/s, AUC=0.843, acc=0.6, specificity=0.882, val_loss=0.91908516]\n",
      "Training Epoch [33/40]: 100%|█████████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.88, acc=0.664, complete_loss=6.0423, sensivity=0.562, specificity=0.9, train_loss=0.8167]\n",
      "Validation Epoch [33/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.33it/s, AUC=0.842, acc=0.615, specificity=0.885, val_loss=0.94239241]\n",
      "Training Epoch [34/40]: 100%|██████████████████████████████████████| 459/459 [07:50<00:00,  1.02s/it, AUC=0.883, acc=0.668, complete_loss=6.0168, sensivity=0.564, specificity=0.902, train_loss=0.8071]\n",
      "Validation Epoch [34/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.42it/s, AUC=0.842, acc=0.612, specificity=0.884, val_loss=0.95892645]\n",
      "Training Epoch [35/40]: 100%|███████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.884, acc=0.67, complete_loss=5.9970, sensivity=0.562, specificity=0.902, train_loss=0.8030]\n",
      "Validation Epoch [35/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.33it/s, AUC=0.843, acc=0.614, specificity=0.884, val_loss=0.95134340]\n",
      "Training Epoch [36/40]: 100%|███████████████████████████████████████| 459/459 [07:51<00:00,  1.03s/it, AUC=0.884, acc=0.67, complete_loss=5.9809, sensivity=0.568, specificity=0.902, train_loss=0.8024]\n",
      "Validation Epoch [36/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:08<00:00,  1.45it/s, AUC=0.842, acc=0.603, specificity=0.883, val_loss=0.95538734]\n",
      "Training Epoch [37/40]: 100%|████████████████████████████████████████| 459/459 [07:54<00:00,  1.03s/it, AUC=0.884, acc=0.67, complete_loss=5.9643, sensivity=0.57, specificity=0.902, train_loss=0.8011]\n",
      "Validation Epoch [37/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.34it/s, AUC=0.842, acc=0.613, specificity=0.885, val_loss=0.94420871]\n",
      "Training Epoch [38/40]: 100%|██████████████████████████████████████| 459/459 [07:49<00:00,  1.02s/it, AUC=0.884, acc=0.673, complete_loss=5.9476, sensivity=0.571, specificity=0.903, train_loss=0.7996]\n",
      "Validation Epoch [38/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.41it/s, AUC=0.84, acc=0.605, specificity=0.882, val_loss=0.97887552]\n",
      "Training Epoch [39/40]: 100%|██████████████████████████████████████| 459/459 [07:50<00:00,  1.02s/it, AUC=0.888, acc=0.678, complete_loss=5.9276, sensivity=0.573, specificity=0.904, train_loss=0.7879]\n",
      "Validation Epoch [39/40]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.839, acc=0.613, specificity=0.884, val_loss=0.95400551]\n",
      "Training Epoch [40/40]: 100%|███████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.888, acc=0.677, complete_loss=5.9268, sensivity=0.57, specificity=0.904, train_loss=0.7886]\n",
      "Validation Epoch [40/40]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.43it/s, AUC=0.84, acc=0.612, specificity=0.884, val_loss=0.97280512]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test model ResNet50Model - Loss: 0.94, ACC: 0.61, AUC: 0.84, Sensivility: 0.56, Specificity: 0.54\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Primera prueba para ver el entrenamiento\n",
    "# He probado antes en local para ver como alcanzaba un 100% de acc y 0.001 de loss con pocos datos\n",
    "train_model(model, trainer, train_dataset, val_dataset, epochs=40, device=device, save_model = \"experimento1.2\", name=\"Experimento1.3\", wdb=True, local=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e65fcecf",
   "metadata": {
    "papermill": {
     "duration": 1.938793,
     "end_time": "2025-03-05T01:31:51.036129",
     "exception": false,
     "start_time": "2025-03-05T01:31:49.097336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6786867,
     "sourceId": 10917159,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19479.636313,
   "end_time": "2025-03-05T01:31:56.025577",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-04T20:07:16.389264",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
