{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9c04790e",
   "metadata": {
    "papermill": {
     "duration": 0.003746,
     "end_time": "2025-03-05T08:05:33.177916",
     "exception": false,
     "start_time": "2025-03-05T08:05:33.174170",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "509cb204",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:33.185419Z",
     "iopub.status.busy": "2025-03-05T08:05:33.185130Z",
     "iopub.status.idle": "2025-03-05T08:05:41.485076Z",
     "shell.execute_reply": "2025-03-05T08:05:41.484140Z"
    },
    "papermill": {
     "duration": 8.305431,
     "end_time": "2025-03-05T08:05:41.486696",
     "exception": false,
     "start_time": "2025-03-05T08:05:33.181265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import torch\n",
    "from PIL import Image\n",
    "from torchvision import transforms\n",
    "\n",
    "class HistogramEqualization:\n",
    "    \"\"\"Aplica ecualización de histograma para ajuste de contraste\"\"\"\n",
    "    def __call__(self, img):\n",
    "        # Convertir PIL Image a numpy array\n",
    "        img_np = np.array(img)\n",
    "        \n",
    "        # Aplicar ecualización de histograma por canal\n",
    "        if len(img_np.shape) == 3:  # Imagen RGB\n",
    "            img_eq = np.zeros_like(img_np)\n",
    "            for i in range(3):\n",
    "                img_eq[:,:,i] = cv2.equalizeHist(img_np[:,:,i])\n",
    "        else:  # Imagen en escala de grises\n",
    "            img_eq = cv2.equalizeHist(img_np)\n",
    "            \n",
    "        # Convertir de nuevo a PIL Image\n",
    "        return Image.fromarray(img_eq)\n",
    "\n",
    "class BilateralFilter:\n",
    "    \"\"\"Aplica filtrado bilateral para suavizado preservando bordes\"\"\"\n",
    "    def __init__(self, d=9, sigma_color=75, sigma_space=75):\n",
    "        self.d = d  # Diámetro de cada vecindario de píxeles\n",
    "        self.sigma_color = sigma_color  # Filtro sigma en el espacio de color\n",
    "        self.sigma_space = sigma_space  # Filtro sigma en el espacio de coordenadas\n",
    "    \n",
    "    def __call__(self, img):\n",
    "        # Convertir PIL Image a numpy array\n",
    "        img_np = np.array(img)\n",
    "        \n",
    "        # Aplicar filtro bilateral\n",
    "        img_filtered = cv2.bilateralFilter(\n",
    "            img_np, self.d, self.sigma_color, self.sigma_space)\n",
    "            \n",
    "        # Convertir de nuevo a PIL Image\n",
    "        return Image.fromarray(img_filtered)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9bbe8377",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:41.494684Z",
     "iopub.status.busy": "2025-03-05T08:05:41.494289Z",
     "iopub.status.idle": "2025-03-05T08:05:41.505505Z",
     "shell.execute_reply": "2025-03-05T08:05:41.504825Z"
    },
    "papermill": {
     "duration": 0.016429,
     "end_time": "2025-03-05T08:05:41.506691",
     "exception": false,
     "start_time": "2025-03-05T08:05:41.490262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class DatasetExperiment1(Dataset):\n",
    "    def __init__(self, mode='train', batch_size=32, local = False, path = ''):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            mode (str): 'train', 'val' o 'test'.\n",
    "            transform: Transformaciones de torchvision a aplicar a las imágenes.\n",
    "        \"\"\"\n",
    "        assert mode in ['train', 'val', 'test'], \"Mode must be 'train', 'val', or 'test'\"\n",
    "        if local:\n",
    "            print(\"LOCAL MODE ENABLED\")\n",
    "\n",
    "        # Transformaciones del paper\n",
    "        # Histogram equalization for contrast adjustment\n",
    "        # and bilateral filtering for smoothness\n",
    "        self.transform =  transforms.Compose([\n",
    "            transforms.Resize((224, 224)),\n",
    "            HistogramEqualization(),\n",
    "            BilateralFilter(d=9, sigma_color=75, sigma_space=75),\n",
    "            transforms.ToTensor(),\n",
    "        ])\n",
    "        self.data_path = os.path.join(path, mode)\n",
    "        self.classes = sorted(os.listdir(self.data_path))  # Lista de clases\n",
    "        self.data = []\n",
    "        self.batch_size = batch_size\n",
    "        # Cargar imágenes con sus etiquetas\n",
    "        \n",
    "\n",
    "        for label, class_name in enumerate(self.classes):\n",
    "            class_path = os.path.join(self.data_path, class_name)\n",
    "            i = 0\n",
    "            for img_name in os.listdir(class_path):\n",
    "                if local and i >= 3:\n",
    "                    break\n",
    "                img_path = os.path.join(class_path, img_name)\n",
    "                self.data.append((img_path, label))\n",
    "                i += 1\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        img_path, label = self.data[idx]\n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        \n",
    "        return image, label\n",
    "    \n",
    "    def get_dataloader(self, shuffle=True):       \n",
    "        return DataLoader(self, batch_size=self.batch_size, shuffle=shuffle)\n",
    "    def show_image(self, idx, transformed=True, figsize=(10, 8)):\n",
    "        \"\"\"\n",
    "        Muestra una imagen del dataset con su etiqueta\n",
    "        \n",
    "        Args:\n",
    "            idx (int): Índice de la imagen a mostrar\n",
    "            transformed (bool): Si es True, muestra la imagen transformada. \n",
    "                               Si es False, muestra la imagen original.\n",
    "            figsize (tuple): Tamaño de la figura (ancho, alto)\n",
    "        \"\"\"\n",
    "        if idx >= len(self):\n",
    "            print(f\"Índice {idx} fuera de rango. El dataset tiene {len(self)} elementos.\")\n",
    "            return\n",
    "        \n",
    "        img_path, label = self.data[idx]\n",
    "        class_name = self.classes[label]\n",
    "        \n",
    "        plt.figure(figsize=figsize)\n",
    "        \n",
    "        # Mostrar imagen original\n",
    "        orig_img = Image.open(img_path).convert('RGB')\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.imshow(orig_img)\n",
    "        plt.title(f\"Original: Clase {class_name} (label {label})\")\n",
    "        plt.axis('off')\n",
    "        \n",
    "        # Mostrar imagen transformada si se solicita\n",
    "        if transformed:\n",
    "            trans_img = self.transform(orig_img)\n",
    "            # Convertir tensor a numpy para visualización\n",
    "            if isinstance(trans_img, torch.Tensor):\n",
    "                trans_img = trans_img.permute(1, 2, 0).numpy()  # Cambiar de CxHxW a HxWxC\n",
    "                # Normalizar valores para visualización\n",
    "                trans_img = np.clip(trans_img, 0, 1)\n",
    "            \n",
    "            plt.subplot(1, 2, 2)\n",
    "            plt.imshow(trans_img)\n",
    "            plt.title(\"Con transformaciones aplicadas\")\n",
    "            plt.axis('off')\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "        \n",
    "        # Imprimir información adicional\n",
    "        print(f\"Ruta de la imagen: {img_path}\")\n",
    "        print(f\"Clase: {class_name} (label {label})\")\n",
    "        print(f\"Resolución original: {orig_img.size}\")\n",
    "        if transformed and isinstance(trans_img, np.ndarray):\n",
    "            print(f\"Resolución después de transformaciones: {trans_img.shape[:2]}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f5e393",
   "metadata": {
    "papermill": {
     "duration": 0.003025,
     "end_time": "2025-03-05T08:05:41.512958",
     "exception": false,
     "start_time": "2025-03-05T08:05:41.509933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train config 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eef98386",
   "metadata": {
    "papermill": {
     "duration": 0.002784,
     "end_time": "2025-03-05T08:05:41.518847",
     "exception": false,
     "start_time": "2025-03-05T08:05:41.516063",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The hyperparameters of the proposed ensemble model were\n",
    "tuned by the trial-and-error method. \n",
    "L2 regularization, \n",
    "batch normalization, \n",
    "dropout rate\n",
    "\n",
    "The Adam optimizer\n",
    "Epochs = 150. \n",
    "The learning rate scheduler and ReduceLROnPlateau were used for handling\n",
    "the learning rate with an initial value of 0.001. The loss\n",
    "function used for the model was categorical cross-entropy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f036d35",
   "metadata": {
    "papermill": {
     "duration": 0.002839,
     "end_time": "2025-03-05T08:05:41.524761",
     "exception": false,
     "start_time": "2025-03-05T08:05:41.521922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "151a9e96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:41.532059Z",
     "iopub.status.busy": "2025-03-05T08:05:41.531772Z",
     "iopub.status.idle": "2025-03-05T08:05:50.326167Z",
     "shell.execute_reply": "2025-03-05T08:05:50.325418Z"
    },
    "papermill": {
     "duration": 8.800108,
     "end_time": "2025-03-05T08:05:50.327861",
     "exception": false,
     "start_time": "2025-03-05T08:05:41.527753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install -q lightning\n",
    "import lightning.pytorch as pl\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchmetrics as tm\n",
    "from torchmetrics.classification import MulticlassConfusionMatrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "class Classification(pl.LightningModule):\n",
    "    \"\"\"\n",
    "    Trainer para entrenar un modelo de clasificación multiclase\n",
    "    y de dimension 1 con valores [0, num_classes]\n",
    "    \"\"\"\n",
    "    def __init__(self, model, device, L1=0.001, L2=0.001, lr=0.001, patience=5, factor=0.1, betas=(0.9, 0.999)):\n",
    "        super().__init__()\n",
    "        self.save_hyperparameters(ignore=(\"model\",))\n",
    "\n",
    "        self.model = model\n",
    "\n",
    "        self.loss_fn = nn.CrossEntropyLoss()\n",
    "        self.L1 = L1\n",
    "        self.L2 = L2\n",
    "        self.learning_rate = lr\n",
    "        self.patience = patience\n",
    "        self.factor = factor\n",
    "        self.betas = betas\n",
    "\n",
    "        self.num_classes = 5\n",
    "        self.confusion_matrix = MulticlassConfusionMatrix(num_classes=5).to(device)\n",
    "        self.auc_metric = tm.AUROC(num_classes=5, task=\"multiclass\").to(device)  # Definir métrica AUROC para clasificación multiclase\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "    def training_step(self, x, y):\n",
    "        y = y\n",
    "        y_hat = self.model(x)\n",
    "        y_oh = self.transform_classes(y)\n",
    "        loss = self.loss_fn(y_hat, y_oh)\n",
    "        \n",
    "        # Regularización L1\n",
    "        L1_reg = torch.tensor(0., requires_grad=True)\n",
    "        for param in self.model.parameters():\n",
    "            L1_reg = L1_reg + torch.sum(torch.abs(param))\n",
    "        \n",
    "        # Regularización L2\n",
    "        L2_reg = torch.tensor(0., requires_grad=True)\n",
    "        for param in self.model.parameters():\n",
    "            L2_reg = L2_reg + torch.sum(param ** 2)\n",
    "        \n",
    "        # Añadir regularización a la pérdida\n",
    "        prediction_loss = loss\n",
    "        loss = loss + self.L1 * L1_reg + self.L2 * L2_reg\n",
    "        # Obtener la clase predicha\n",
    "        y_pred = torch.argmax(y_hat, dim=1)\n",
    "        # Calcular métricas\n",
    "        loss.backward()\n",
    "        self.confusion_matrix.update(y_pred, y)\n",
    "        self.auc_metric.update(y_hat, y)\n",
    "\n",
    "        precision, recall, f1_score, ACC, AUC, specificity = self.calculate_metrics_from_confusion_matrix()\n",
    "\n",
    "        return {\"loss\": prediction_loss, \"real_loss\": loss, \"ACC\": ACC, \"recall\": recall, \"precision\": precision, \"f1_score\": f1_score, \"AUC\": AUC, \"specificity\": specificity}\n",
    "\n",
    "    def validation_step(self, x, y):\n",
    "        y = y\n",
    "        y_hat = self.model(x)\n",
    "        y_oh = self.transform_classes(y)\n",
    "        loss = self.loss_fn(y_hat, y_oh)\n",
    "        # Obtener la clase predicha\n",
    "        y_pred = torch.argmax(y_hat, dim=1)\n",
    "        # Calcular métricas\n",
    "        self.confusion_matrix.update(y_pred, y)\n",
    "        self.auc_metric.update(y_hat, y)\n",
    "\n",
    "        precision, recall, f1_score, ACC, AUC, specificity = self.calculate_metrics_from_confusion_matrix()\n",
    "        return {\"loss\": loss, \"ACC\": ACC, \"precision\" : precision, \"recall\": recall, \"f1_score\" : f1_score, \"AUC\": AUC, \"specificity\": specificity}\n",
    "\n",
    "    def transform_classes(self, y):\n",
    "        # Convertir las clases a un formato de one-hot encoding\n",
    "        return torch.nn.functional.one_hot(y.to(torch.int64), num_classes=5).to(float).squeeze()\n",
    "    def restart_epoch(self, plot = False):\n",
    "        if plot:\n",
    "            self.plot()\n",
    "        self.confusion_matrix.reset()\n",
    "        self.auc_metric.reset()\n",
    "    def calculate_metrics_from_confusion_matrix(self):\n",
    "        # Obtener la matriz de confusión (suponiendo que es un tensor de torch)\n",
    "        cm = self.confusion_matrix.compute()\n",
    "        total_samples = cm.sum()\n",
    "        \n",
    "        # Verdaderos positivos por clase (diagonal de la matriz)\n",
    "        true_positives = torch.diag(cm)\n",
    "        \n",
    "        # Predicciones totales por clase (sumar columnas)\n",
    "        predicted_positives = cm.sum(dim=0)\n",
    "        \n",
    "        # Ejemplos reales por clase (sumar filas)\n",
    "        actual_positives = cm.sum(dim=1)\n",
    "        \n",
    "        # Calcular falsos positivos y falsos negativos por clase\n",
    "        false_positives = predicted_positives - true_positives\n",
    "        false_negatives = actual_positives - true_positives\n",
    "        \n",
    "        # Calcular verdaderos negativos por clase\n",
    "        true_negatives = total_samples - (actual_positives + predicted_positives - true_positives)\n",
    "        \n",
    "        # Calcular métricas por clase con robustez para evitar división por cero\n",
    "        precision_per_class = true_positives / (predicted_positives + 1e-8)\n",
    "        recall_per_class = true_positives / (actual_positives + 1e-8)\n",
    "        specificity_per_class = true_negatives / (true_negatives + false_positives + 1e-8)\n",
    "        f1_per_class = 2 * (precision_per_class * recall_per_class) / (precision_per_class + recall_per_class + 1e-8)\n",
    "        \n",
    "        # Promediar las métricas por clase\n",
    "        precision = precision_per_class.mean()\n",
    "        recall = recall_per_class.mean()\n",
    "        specificity = specificity_per_class.mean()\n",
    "        f1 = f1_per_class.mean()\n",
    "        \n",
    "        # Calcular Accuracy (exactitud)\n",
    "        ACC = true_positives.sum() / total_samples\n",
    "        \n",
    "        # Calcular el AUC (suponiendo que self.auc_metric ya está correctamente definido)\n",
    "        AUC = self.auc_metric.compute()\n",
    "        \n",
    "        return precision, recall, f1, ACC, AUC, specificity\n",
    "\n",
    "\n",
    "    def configure_optimizers(self):\n",
    "        optimizer = torch.optim.Adam(self.model.parameters(),\n",
    "                                     lr=self.learning_rate,\n",
    "                                     betas=self.betas)\n",
    "        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer,\n",
    "                                                               factor=self.factor,\n",
    "                                                               patience=self.patience)\n",
    "        return optimizer, scheduler\n",
    "    def plot(self, epoch=0):\n",
    "        # Computa la matriz de confusión y las métricas por clase\n",
    "        cm = self.confusion_matrix.compute().cpu().numpy()\n",
    "        support = cm.sum(axis=1)\n",
    "        precision_per_class = np.diag(cm) / (cm.sum(axis=0) + 1e-8)\n",
    "        recall_per_class = np.diag(cm) / (cm.sum(axis=1) + 1e-8)\n",
    "        f1_per_class = 2 * (precision_per_class * recall_per_class) / (precision_per_class + recall_per_class + 1e-8)\n",
    "        \n",
    "        # Cálculo de especificidad por clase\n",
    "        FP = cm.sum(axis=0) - np.diag(cm)\n",
    "        FN = cm.sum(axis=1) - np.diag(cm)\n",
    "        TN = cm.sum() - (FP + FN + np.diag(cm))\n",
    "        specificity_per_class = TN / (TN + FP + 1e-8)\n",
    "        \n",
    "        accuracy = np.diag(cm).sum() / cm.sum()\n",
    "\n",
    "        # Crea dos subplots: uno para la matriz de confusión y otro para la tabla de métricas\n",
    "        fig, axs = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "        # Subplot 1: Matriz de confusión con heatmap\n",
    "        sns.heatmap(cm, annot=True, fmt=\"d\", ax=axs[0], cmap=\"Blues\")\n",
    "        axs[0].set_title(\"Matriz de Confusión epoch \" + str(epoch))\n",
    "        axs[0].set_xlabel(\"Predicción\")\n",
    "        axs[0].set_ylabel(\"Real\")\n",
    "\n",
    "        # Subplot 2: Tabla de métricas por clase\n",
    "        table_data = []\n",
    "        for i in range(self.num_classes):\n",
    "            table_data.append([f\"Clase {i}\",\n",
    "                            f\"{precision_per_class[i]:.2f}\",\n",
    "                            f\"{recall_per_class[i]:.2f}\",\n",
    "                            f\"{f1_per_class[i]:.2f}\",\n",
    "                            f\"{specificity_per_class[i]:.2f}\",\n",
    "                            int(support[i])])\n",
    "        axs[1].axis('tight')\n",
    "        axs[1].axis('off')\n",
    "        table = axs[1].table(cellText=table_data,\n",
    "                            colLabels=[\"Clase\", \"Precision\", \"Sensivity/Recall\", \"F1\", \"Specificity\", \"Support\"],\n",
    "                            cellLoc=\"center\", loc=\"center\")\n",
    "        axs[1].set_title(f\"Metrics por clase\\nAccuracy General: {accuracy:.2f}\", pad=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f44c3d2f",
   "metadata": {
    "papermill": {
     "duration": 0.003062,
     "end_time": "2025-03-05T08:05:50.334473",
     "exception": false,
     "start_time": "2025-03-05T08:05:50.331411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a1877156",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:50.342094Z",
     "iopub.status.busy": "2025-03-05T08:05:50.341691Z",
     "iopub.status.idle": "2025-03-05T08:05:50.348330Z",
     "shell.execute_reply": "2025-03-05T08:05:50.347703Z"
    },
    "papermill": {
     "duration": 0.011836,
     "end_time": "2025-03-05T08:05:50.349455",
     "exception": false,
     "start_time": "2025-03-05T08:05:50.337619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "import torchvision.models as models\n",
    "\n",
    "class ResNet50Model(nn.Module):\n",
    "    \"\"\"\n",
    "    Modelo basado en ResNet50 para la clasificación de radiografías.\n",
    "    Permite personalización en el número de clases y si se usa transfer learning.\n",
    "    \"\"\"\n",
    "    def __init__(self, num_classes=5, pretrained=True, freeze_backbone=False, dropout_rate=0.3):\n",
    "        \"\"\"\n",
    "        Inicializa el modelo ResNet50.\n",
    "        \n",
    "        Args:\n",
    "            num_classes (int): Número de clases para la clasificación (default: 5)\n",
    "            pretrained (bool): Si se deben usar pesos preentrenados en ImageNet (default: True)\n",
    "            freeze_backbone (bool): Si se deben congelar las capas de la red base (default: False)\n",
    "            dropout_rate (float): Tasa de dropout aplicada antes de la capa de clasificación (default: 0.3)\n",
    "        \"\"\"\n",
    "        super(ResNet50Model, self).__init__()\n",
    "        \n",
    "        # Cargar el modelo base ResNet50\n",
    "        self.model = models.resnet50(weights='IMAGENET1K_V2' if pretrained else None)\n",
    "        \n",
    "        # Nombre del modelo para identificación\n",
    "        self.name = \"ResNet50\"\n",
    "        \n",
    "        # Congelar los parámetros de la red si se especifica\n",
    "        if freeze_backbone:\n",
    "            for param in self.model.parameters():\n",
    "                param.requires_grad = False\n",
    "        \n",
    "        # Reemplazar la capa de clasificación final\n",
    "        in_features = self.model.fc.in_features\n",
    "        self.model.fc = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(in_features, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(512, num_classes)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Propagación hacia adelante a través del modelo.\n",
    "        \n",
    "        Args:\n",
    "            x: Tensor de entrada con forma [batch_size, channels, height, width]\n",
    "            \n",
    "        Returns:\n",
    "            Tensor con las predicciones de clase [batch_size, num_classes]\n",
    "        \"\"\"\n",
    "        return self.model(x)\n",
    "    \n",
    "    def get_features(self, x):\n",
    "        \"\"\"\n",
    "        Obtiene los features del modelo antes de la capa de clasificación.\n",
    "        Útil para análisis de características o transferencia de estilo.\n",
    "        \n",
    "        Args:\n",
    "            x: Tensor de entrada con forma [batch_size, channels, height, width]\n",
    "            \n",
    "        Returns:\n",
    "            Tensor de características [batch_size, 2048]\n",
    "        \"\"\"\n",
    "        # Extrae todas las capas excepto la final\n",
    "        modules = list(self.model.children())[:-1]\n",
    "        feature_extractor = nn.Sequential(*modules)\n",
    "        \n",
    "        # Obtiene los features y los aplana\n",
    "        features = feature_extractor(x)\n",
    "        features = features.view(features.size(0), -1)\n",
    "        \n",
    "        return features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05aa6572",
   "metadata": {
    "papermill": {
     "duration": 0.002861,
     "end_time": "2025-03-05T08:05:50.355481",
     "exception": false,
     "start_time": "2025-03-05T08:05:50.352620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba4fd050",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:50.362536Z",
     "iopub.status.busy": "2025-03-05T08:05:50.362301Z",
     "iopub.status.idle": "2025-03-05T08:05:52.240388Z",
     "shell.execute_reply": "2025-03-05T08:05:52.239696Z"
    },
    "papermill": {
     "duration": 1.883605,
     "end_time": "2025-03-05T08:05:52.242185",
     "exception": false,
     "start_time": "2025-03-05T08:05:50.358580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from tqdm import tqdm\n",
    "from wandb import wandb\n",
    "\n",
    "def create_tqdm_bar(iterable, desc, mode):\n",
    "    return tqdm(enumerate(iterable),total=len(iterable), ncols=200, desc=desc)\n",
    "\n",
    "def train_model(model, trainer, train_dataset, val_dataset, epochs=5, transform=None, device='cuda', save_model = \"\", name=\"Test\", wdb=True, local=False, project=\"oai-knee-cartilage-segmentation\"):\n",
    "    if wdb:\n",
    "        if wandb.run is not None:\n",
    "            wandb.finish()\n",
    "        wandb.init(\n",
    "            project=project,\n",
    "            name=name,\n",
    "            # track hyperparameters and run metadata\n",
    "            config={\n",
    "                \"model\": model.name,\n",
    "                \"Batch_size\": train_dataset.batch_size,\n",
    "                \"learning_rate\": trainer.learning_rate,\n",
    "                \"L1\": trainer.L1,\n",
    "                \"L2\": trainer.L2,\n",
    "                \"patience\": trainer.patience,\n",
    "                \"factor\": trainer.factor,\n",
    "                \"betas\": trainer.betas,\n",
    "                \"epochs\": epochs,\n",
    "            }\n",
    "        )\n",
    "    train_loader = train_dataset.get_dataloader(shuffle=True)\n",
    "    val_loader = val_dataset.get_dataloader(shuffle=True)\n",
    "    model.to(device)\n",
    "    train(model, train_loader, val_loader, trainer, epochs, device, wdb, local = local, save_model = save_model)\n",
    "    \n",
    "\n",
    "def train(model, train_loader, val_loader, trainer, epochs, device, wdb, local = False, save_model = \"\"):\n",
    "    \"\"\"\n",
    "    train the given model\n",
    "    \"\"\"\n",
    "    optimizer, scheduler = trainer.configure_optimizers()\n",
    "    best_model = None\n",
    "    best_loss = float('inf')\n",
    "    for epoch in range(epochs):        \n",
    "        training_loss = []\n",
    "        validation_loss = []\n",
    "\n",
    "        training_loss_num = 0\n",
    "        complete_loss_num = 0\n",
    "        validation_loss_num = 0\n",
    "\n",
    "        # use training data\n",
    "        model.train()\n",
    "\n",
    "        training_loop = create_tqdm_bar(train_loader, desc=f'Training Epoch [{epoch + 1}/{epochs}]', mode='train')\n",
    "        for train_iteration, batch in training_loop:\n",
    "            batch = batch[0].to(device), batch[1].to(device)\n",
    "            optimizer.zero_grad()\n",
    "            res = trainer.training_step(batch[0], batch[1])\n",
    "            optimizer.step()\n",
    "\n",
    "            training_loss.append(res['loss'].item())\n",
    "            training_loss_num += res['loss'].item()\n",
    "            complete_loss_num += res['real_loss'].item()\n",
    "            # Update the progress bar.\n",
    "            training_loop.set_postfix(train_loss=\"{:.4f}\".format(training_loss_num / (train_iteration + 1)),\n",
    "                                      complete_loss=\"{:.4f}\".format(complete_loss_num / (train_iteration + 1)),\n",
    "                                      acc=res['ACC'].item(),\n",
    "                                      AUC=res['AUC'].item(),\n",
    "                                      sensivity=res['recall'].item(),\n",
    "                                      specificity=res['specificity'].item())\n",
    "            if wdb:\n",
    "                \n",
    "                wandb.log({\"train_loss\": training_loss_num / (train_iteration + 1),\n",
    "                           \"complete_loss\": complete_loss_num / (train_iteration + 1),\n",
    "                        \"train_acc\": res['ACC'],\n",
    "                        \"train_recall\": res['recall'].item(),\n",
    "                        \"train_precision\": res['precision'].item(),\n",
    "                        \"train_specifity\": res['specificity'].item(),\n",
    "                        \"train_f1_score\": res['f1_score'].item(),\n",
    "                        \"train_AUC\": res['AUC'],\n",
    "                        \"epoch\": epoch,\n",
    "                        \"learning_rate\": optimizer.param_groups[0]['lr']})\n",
    "        trainer.restart_epoch(plot=False)\n",
    "        # use validation data\n",
    "        if local:\n",
    "            continue\n",
    "        model.eval()\n",
    "        val_loop = create_tqdm_bar(val_loader, desc=f'Validation Epoch [{epoch + 1}/{epochs}]', mode='val')\n",
    "        with torch.no_grad():\n",
    "            for val_iteration, batch in val_loop:\n",
    "                batch = batch[0].to(device), batch[1].to(device)\n",
    "                res = trainer.validation_step(batch[0], batch[1])  \n",
    "                validation_loss.append(res['loss'].item())\n",
    "                validation_loss_num += res['loss'].item()\n",
    "                val_loop.set_postfix(val_loss = \"{:.8f}\".format(validation_loss_num / (val_iteration + 1)),\n",
    "                                      acc=res['ACC'].item(),\n",
    "                                      AUC=res['AUC'].item(),\n",
    "                                      specificity=res['specificity'].item())\n",
    "                                      \n",
    "        if wdb:\n",
    "            wandb.log({\"val_loss\": validation_loss_num / (val_iteration + 1),\n",
    "                    \"val_acc\": res['ACC'],\n",
    "                    \"val_recall\": res['recall'].item(),\n",
    "                    \"val_precision\": res['precision'].item(),\n",
    "                    \"val_specificity\": res['specificity'].item(),\n",
    "                    \"val_f1_score\": res['f1_score'].item(),\n",
    "                    \"val_AUC\": res['AUC'],\n",
    "                    \"epoch\": epoch,\n",
    "                    \"learning_rate\": optimizer.param_groups[0]['lr']})\n",
    "        if validation_loss_num < best_loss:\n",
    "            best_loss = validation_loss_num\n",
    "            if save_model != \"\":\n",
    "                torch.save(model.state_dict(), f\"best_model_{model.__class__.__name__}_{save_model}_epoch_{epoch}.pt\")\n",
    "        scheduler.step(res['loss'].item())\n",
    "        trainer.restart_epoch(plot=False)\n",
    "    \n",
    "    test_model(model, val_loader, trainer, device, wdb)\n",
    "\n",
    "def test_model(model, test_loader, trainer, device, wdb=False):\n",
    "    \"\"\"\n",
    "    Test the given model\n",
    "    \"\"\"\n",
    "    model.eval()\n",
    "    model.to(device)\n",
    "\n",
    "    epoch_loss = 0.0\n",
    "    avg_loss = 0.0\n",
    "    trainer.restart_epoch(plot = False)\n",
    "    for batch in test_loader:\n",
    "        inputs, labels = batch\n",
    "        inputs = inputs.to(device)\n",
    "        \n",
    "        labels = labels.to(device)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            res = trainer.validation_step(inputs, labels)\n",
    "            # Extraer valores escalares\n",
    "            loss = res['loss']\n",
    "            \n",
    "        loss_value = loss.item()\n",
    "        # Calcular promedios\n",
    "        epoch_loss += loss_value\n",
    "\n",
    "    ACC_value = res['ACC']\n",
    "    recall_value = res['recall'].item()\n",
    "    precision_value = res['precision'].item()\n",
    "    f1_score_value = res['f1_score'].item()\n",
    "    AUC_value = res['AUC']\n",
    "    avg_loss = epoch_loss / len(test_loader)\n",
    "    if wdb:\n",
    "        wandb.log({\"test_loss\": avg_loss, \"test_acc\": ACC_value.item(),\n",
    "                \"test_recall\": recall_value, \"test_precision\": precision_value,\n",
    "                \"test_f1_score\": f1_score_value, \"test_AUC\" : AUC_value})\n",
    "    \n",
    "    print(f\"Test model {model.__class__.__name__} - Loss: {avg_loss:.2f}, ACC: {ACC_value:.2f}, AUC: {AUC_value:.2f}, Sensivility: {recall_value:.2f}, Specificity: {precision_value:.2f}\")\n",
    "\n",
    "    trainer.restart_epoch(plot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ab6a56f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:52.249687Z",
     "iopub.status.busy": "2025-03-05T08:05:52.249403Z",
     "iopub.status.idle": "2025-03-05T08:05:53.271966Z",
     "shell.execute_reply": "2025-03-05T08:05:53.270992Z"
    },
    "papermill": {
     "duration": 1.028042,
     "end_time": "2025-03-05T08:05:53.273635",
     "exception": false,
     "start_time": "2025-03-05T08:05:52.245593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms\n",
    "import matplotlib.pyplot as plt\n",
    "BATCH_SIZE = 64\n",
    "LEARNING_RATE = 0.001\n",
    "FACTOR = 0.1\n",
    "L1 = 0.00\n",
    "L2 = 0.0001\n",
    "PATIENCE = 5\n",
    "BETAS=(0.9, 0.999)\n",
    "DATASET_PATH = '/kaggle/input/aug-oai-capitulo3/augmented_oai'\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "train_dataset = DatasetExperiment1('train', batch_size=BATCH_SIZE, local=False, path = DATASET_PATH)\n",
    "val_dataset = DatasetExperiment1('val', batch_size=BATCH_SIZE, local=False, path = DATASET_PATH)\n",
    "model = ResNet50Model(num_classes=len(train_dataset.classes), dropout_rate=0.5, pretrained = False)\n",
    "trainer = Classification(model, device, L1=L1, L2=L2, lr=LEARNING_RATE, patience=PATIENCE, factor=FACTOR, betas=BETAS)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a058abb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:53.281433Z",
     "iopub.status.busy": "2025-03-05T08:05:53.281181Z",
     "iopub.status.idle": "2025-03-05T08:05:54.294705Z",
     "shell.execute_reply": "2025-03-05T08:05:54.293907Z"
    },
    "papermill": {
     "duration": 1.018969,
     "end_time": "2025-03-05T08:05:54.296041",
     "exception": false,
     "start_time": "2025-03-05T08:05:53.277072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mchermar\u001b[0m (\u001b[33mchermar-universitat-polit-cnica-de-val-ncia\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wandb.login(key=\"254f72e7bdeec44797ba1b2a91ebbc63900b89f4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3f9af5cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-05T08:05:54.304106Z",
     "iopub.status.busy": "2025-03-05T08:05:54.303872Z",
     "iopub.status.idle": "2025-03-05T10:49:50.156885Z",
     "shell.execute_reply": "2025-03-05T10:49:50.156041Z"
    },
    "papermill": {
     "duration": 9836.347077,
     "end_time": "2025-03-05T10:49:50.646793",
     "exception": false,
     "start_time": "2025-03-05T08:05:54.299716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250305_080554-qqb4fo3k\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33m!pretrain\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/chermar-universitat-polit-cnica-de-val-ncia/oai-knee-cartilage-segmentation\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/chermar-universitat-polit-cnica-de-val-ncia/oai-knee-cartilage-segmentation/runs/qqb4fo3k\u001b[0m\n",
      "Training Epoch [1/20]:   0%|                                                                                                                                                    | 0/459 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torchmetrics/utilities/prints.py:43: UserWarning: No positive samples in targets, true positive value should be meaningless. Returning zero tensor in true positive score\n",
      "  warnings.warn(*args, **kwargs)  # noqa: B028\n",
      "Training Epoch [1/20]: 100%|████████████████████████████████████████| 459/459 [10:26<00:00,  1.37s/it, AUC=0.64, acc=0.416, complete_loss=5.4311, sensivity=0.246, specificity=0.818, train_loss=1.3521]\n",
      "Validation Epoch [1/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:12<00:00,  1.03it/s, AUC=0.714, acc=0.388, specificity=0.831, val_loss=1.37137105]\n",
      "Training Epoch [2/20]: 100%|████████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.725, acc=0.474, complete_loss=2.6645, sensivity=0.323, specificity=0.84, train_loss=1.2186]\n",
      "Validation Epoch [2/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.31it/s, AUC=0.738, acc=0.441, specificity=0.825, val_loss=1.26159505]\n",
      "Training Epoch [3/20]: 100%|███████████████████████████████████████| 459/459 [07:50<00:00,  1.03s/it, AUC=0.749, acc=0.497, complete_loss=1.8713, sensivity=0.352, specificity=0.848, train_loss=1.1711]\n",
      "Validation Epoch [3/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.32it/s, AUC=0.666, acc=0.403, specificity=0.805, val_loss=1.77186836]\n",
      "Training Epoch [4/20]: 100%|████████████████████████████████████████| 459/459 [08:05<00:00,  1.06s/it, AUC=0.763, acc=0.51, complete_loss=1.5652, sensivity=0.365, specificity=0.852, train_loss=1.1406]\n",
      "Validation Epoch [4/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:10<00:00,  1.29it/s, AUC=0.695, acc=0.336, specificity=0.825, val_loss=1.40597043]\n",
      "Training Epoch [5/20]: 100%|███████████████████████████████████████| 459/459 [07:59<00:00,  1.05s/it, AUC=0.777, acc=0.525, complete_loss=1.4184, sensivity=0.379, specificity=0.857, train_loss=1.1117]\n",
      "Validation Epoch [5/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.30it/s, AUC=0.755, acc=0.415, specificity=0.845, val_loss=1.27201059]\n",
      "Training Epoch [6/20]: 100%|███████████████████████████████████████| 459/459 [07:57<00:00,  1.04s/it, AUC=0.789, acc=0.538, complete_loss=1.3340, sensivity=0.391, specificity=0.862, train_loss=1.0851]\n",
      "Validation Epoch [6/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.764, acc=0.509, specificity=0.848, val_loss=1.14239199]\n",
      "Training Epoch [7/20]: 100%|███████████████████████████████████████| 459/459 [08:03<00:00,  1.05s/it, AUC=0.795, acc=0.547, complete_loss=1.2801, sensivity=0.401, specificity=0.865, train_loss=1.0660]\n",
      "Validation Epoch [7/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.30it/s, AUC=0.748, acc=0.404, specificity=0.838, val_loss=1.32864713]\n",
      "Training Epoch [8/20]: 100%|████████████████████████████████████████| 459/459 [08:02<00:00,  1.05s/it, AUC=0.803, acc=0.557, complete_loss=1.2370, sensivity=0.41, specificity=0.867, train_loss=1.0458]\n",
      "Validation Epoch [8/20]: 100%|█████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.37it/s, AUC=0.807, acc=0.55, specificity=0.859, val_loss=1.09834643]\n",
      "Training Epoch [9/20]: 100%|███████████████████████████████████████| 459/459 [08:01<00:00,  1.05s/it, AUC=0.811, acc=0.561, complete_loss=1.2030, sensivity=0.421, specificity=0.868, train_loss=1.0262]\n",
      "Validation Epoch [9/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.32it/s, AUC=0.806, acc=0.519, specificity=0.865, val_loss=1.12802977]\n",
      "Training Epoch [10/20]: 100%|█████████████████████████████████████████| 459/459 [08:00<00:00,  1.05s/it, AUC=0.842, acc=0.6, complete_loss=1.1080, sensivity=0.473, specificity=0.88, train_loss=0.9390]\n",
      "Validation Epoch [10/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.36it/s, AUC=0.849, acc=0.614, specificity=0.887, val_loss=0.90980648]\n",
      "Training Epoch [11/20]: 100%|██████████████████████████████████████| 459/459 [07:54<00:00,  1.03s/it, AUC=0.852, acc=0.616, complete_loss=1.0721, sensivity=0.515, specificity=0.886, train_loss=0.9065]\n",
      "Validation Epoch [11/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.38it/s, AUC=0.851, acc=0.624, specificity=0.885, val_loss=0.93219769]\n",
      "Training Epoch [12/20]: 100%|███████████████████████████████████████| 459/459 [07:50<00:00,  1.02s/it, AUC=0.86, acc=0.627, complete_loss=1.0442, sensivity=0.538, specificity=0.889, train_loss=0.8813]\n",
      "Validation Epoch [12/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.38it/s, AUC=0.854, acc=0.619, specificity=0.886, val_loss=0.91599410]\n",
      "Training Epoch [13/20]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.865, acc=0.637, complete_loss=1.0256, sensivity=0.553, specificity=0.892, train_loss=0.8645]\n",
      "Validation Epoch [13/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.40it/s, AUC=0.862, acc=0.614, specificity=0.883, val_loss=0.88918314]\n",
      "Training Epoch [14/20]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.872, acc=0.645, complete_loss=1.0003, sensivity=0.566, specificity=0.894, train_loss=0.8405]\n",
      "Validation Epoch [14/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.37it/s, AUC=0.858, acc=0.636, specificity=0.891, val_loss=0.92770559]\n",
      "Training Epoch [15/20]: 100%|██████████████████████████████████████| 459/459 [07:53<00:00,  1.03s/it, AUC=0.879, acc=0.654, complete_loss=0.9763, sensivity=0.578, specificity=0.897, train_loss=0.8173]\n",
      "Validation Epoch [15/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.36it/s, AUC=0.86, acc=0.637, specificity=0.892, val_loss=0.88283417]\n",
      "Training Epoch [16/20]: 100%|██████████████████████████████████████| 459/459 [07:48<00:00,  1.02s/it, AUC=0.886, acc=0.667, complete_loss=0.9517, sensivity=0.597, specificity=0.901, train_loss=0.7932]\n",
      "Validation Epoch [16/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:10<00:00,  1.29it/s, AUC=0.861, acc=0.623, specificity=0.884, val_loss=0.91397943]\n",
      "Training Epoch [17/20]: 100%|██████████████████████████████████████| 459/459 [07:46<00:00,  1.02s/it, AUC=0.892, acc=0.678, complete_loss=0.9255, sensivity=0.612, specificity=0.905, train_loss=0.7669]\n",
      "Validation Epoch [17/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.33it/s, AUC=0.86, acc=0.618, specificity=0.888, val_loss=0.88715826]\n",
      "Training Epoch [18/20]: 100%|████████████████████████████████████████| 459/459 [07:45<00:00,  1.01s/it, AUC=0.9, acc=0.687, complete_loss=0.8984, sensivity=0.618, specificity=0.908, train_loss=0.7398]\n",
      "Validation Epoch [18/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.36it/s, AUC=0.863, acc=0.64, specificity=0.892, val_loss=0.93153015]\n",
      "Training Epoch [19/20]: 100%|██████████████████████████████████████| 459/459 [07:47<00:00,  1.02s/it, AUC=0.909, acc=0.701, complete_loss=0.8634, sensivity=0.637, specificity=0.913, train_loss=0.7044]\n",
      "Validation Epoch [19/20]: 100%|███████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.859, acc=0.609, specificity=0.889, val_loss=0.98857477]\n",
      "Training Epoch [20/20]: 100%|███████████████████████████████████████| 459/459 [07:45<00:00,  1.01s/it, AUC=0.916, acc=0.714, complete_loss=0.8324, sensivity=0.66, specificity=0.918, train_loss=0.6728]\n",
      "Validation Epoch [20/20]: 100%|████████████████████████████████████████████████████████████████████████████| 13/13 [00:09<00:00,  1.35it/s, AUC=0.86, acc=0.609, specificity=0.887, val_loss=1.00692983]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test model ResNet50Model - Loss: 1.04, ACC: 0.61, AUC: 0.86, Sensivility: 0.58, Specificity: 0.63\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Primera prueba para ver el entrenamiento\n",
    "# He probado antes en local para ver como alcanzaba un 100% de acc y 0.001 de loss con pocos datos\n",
    "train_model(model, trainer, train_dataset, val_dataset, epochs=20, device=device, save_model = \"experimento1.2\", name=\"!pretrain\", wdb=True, local=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4849da29",
   "metadata": {
    "papermill": {
     "duration": 0.971056,
     "end_time": "2025-03-05T10:49:52.517529",
     "exception": false,
     "start_time": "2025-03-05T10:49:51.546473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6786867,
     "sourceId": 10917159,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 257789,
     "modelInstanceId": 236101,
     "sourceId": 275713,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9865.574319,
   "end_time": "2025-03-05T10:49:56.142138",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-05T08:05:30.567819",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
