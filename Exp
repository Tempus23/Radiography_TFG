{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2097406,"sourceType":"datasetVersion","datasetId":1257880},{"sourceId":11387077,"sourceType":"datasetVersion","datasetId":7130561}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Imports and utility","metadata":{}},{"cell_type":"code","source":"#d8f53b61969adf7ee621c216f680b707\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport keras_hub\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.layers import (Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout,\n                                     BatchNormalization, Activation, GlobalAveragePooling2D)\nfrom tensorflow.keras.applications import VGG16, VGG19, ResNet50, ResNet152, EfficientNetB0, DenseNet121, InceptionV3\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, LearningRateScheduler, ModelCheckpoint\nfrom tensorflow.keras import optimizers\n\ntrain_dir = '/kaggle/input/knee-osteoarthritis-dataset-with-severity/train'\nval_dir = '/kaggle/input/knee-osteoarthritis-dataset-with-severity/val'\ntest_dir = '/kaggle/input/knee-osteoarthritis-dataset-with-severity/test'\nauto_test = '/kaggle/input/knee-osteoarthritis-dataset-with-severity/auto_test'\ncat_dir = '/kaggle/input/cat-knee/clean'\n\nIMG_SIZE = (224, 224)\nBATCH_SIZE = 32\nSEED = 66\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:09:56.544853Z","iopub.execute_input":"2025-05-09T07:09:56.545288Z","iopub.status.idle":"2025-05-09T07:09:56.553312Z","shell.execute_reply.started":"2025-05-09T07:09:56.545255Z","shell.execute_reply":"2025-05-09T07:09:56.552271Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"import pandas as pd\nimport os\n\ndef create_dataframe_from_directory(base_dir, regression=False):\n    data = []\n    for label_str in sorted(os.listdir(base_dir)):\n        label_path = os.path.join(base_dir, label_str)\n        if not os.path.isdir(label_path):\n            continue\n        label = float(label_str) if regression else label_str\n        for fname in os.listdir(label_path):\n            data.append({\n                'filename': os.path.join(label_str, fname),  # ruta relativa\n                'label': label  # KL debe ser numérico para regresión\n            })\n    return pd.DataFrame(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:02.119812Z","iopub.execute_input":"2025-05-09T07:10:02.120148Z","iopub.status.idle":"2025-05-09T07:10:02.124912Z","shell.execute_reply.started":"2025-05-09T07:10:02.120122Z","shell.execute_reply":"2025-05-09T07:10:02.123916Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.1,\n    horizontal_flip=True\n)\n\nval_test_datagen = ImageDataGenerator(rescale=1./255)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True,\n    seed=SEED\n)\n\nval_generator = val_test_datagen.flow_from_directory(\n    val_dir,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=False\n)\n\ntest_generator = val_test_datagen.flow_from_directory(\n    test_dir,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=False\n)\n\ncat_generator = val_test_datagen.flow_from_directory(\n    cat_dir,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=False\n)\n\n\ntrain_df = create_dataframe_from_directory(train_dir)\nval_df = create_dataframe_from_directory(val_dir)\ntest_df = create_dataframe_from_directory(test_dir)\ncat_df = create_dataframe_from_directory(cat_dir)\n\ndatagen = ImageDataGenerator(rescale=1./255)\n\ntrain_generator_reg = datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=train_dir,  # importante\n    x_col='filename',\n    y_col='label',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='raw',\n    shuffle=True\n)\n\nval_generator_reg = datagen.flow_from_dataframe(\n    dataframe=val_df,\n    directory=val_dir,\n    x_col='filename',\n    y_col='label',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='raw',\n    shuffle=False\n)\n\ncat_generator_reg = datagen.flow_from_dataframe(\n    dataframe=cat_df,\n    directory=cat_dir,\n    x_col='filename',\n    y_col='label',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='raw',\n    shuffle=False\n)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:02.475881Z","iopub.execute_input":"2025-05-09T07:10:02.476220Z","iopub.status.idle":"2025-05-09T07:10:06.254015Z","shell.execute_reply.started":"2025-05-09T07:10:02.476194Z","shell.execute_reply":"2025-05-09T07:10:06.253296Z"}},"outputs":[{"name":"stdout","text":"Found 5778 images belonging to 5 classes.\nFound 826 images belonging to 5 classes.\nFound 1656 images belonging to 5 classes.\nFound 83 images belonging to 5 classes.\nFound 5778 validated image filenames.\nFound 826 validated image filenames.\nFound 83 validated image filenames.\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error, accuracy_score\nimport numpy as np\nimport tensorflow as tf\n\nclass CatValidationCallback(tf.keras.callbacks.Callback):\n    def __init__(self, cat_generator, regresion=False, filepath='best_model_cat.keras'):\n        super().__init__()\n        self.cat_generator = cat_generator\n        self.epoch_metrics = []\n        self.regresion = regresion\n        self.filepath = filepath\n        # Inicializamos best_score y best_loss\n        if regresion:\n            self.best_score = 0.0    # queremos maximizar accuracy\n            self.best_loss  = np.inf # y minimizar MAE\n        else:\n            self.best_score = 0.0    # queremos maximizar accuracy\n            self.best_loss  = np.inf # y minimizar categorical loss\n\n    def on_epoch_end(self, epoch, logs=None):\n        # Predicciones\n        preds = self.model.predict(self.cat_generator, verbose=0)\n\n        if self.regresion:\n            # Regresión: calculamos MAE + accuracy sobre clases redondeadas\n            y_pred = preds.flatten()\n            y_true = self.cat_generator.labels\n            loss = mean_absolute_error(y_true, y_pred)\n            y_pred_class = np.clip(np.round(y_pred), 0, 4).astype(int)\n            y_true_class = np.clip(np.round(y_true), 0, 4).astype(int)\n            acc = accuracy_score(y_true_class, y_pred_class)\n            score = acc\n        else:\n            # Clasificación: evalúa el loss y la accuracy\n            loss, acc = self.model.evaluate(self.cat_generator, verbose=0)\n            preds_class = np.argmax(preds, axis=1)\n            y_true = self.cat_generator.classes\n            # para consistency, recalculamos acc con sklearn\n            acc = accuracy_score(y_true, preds_class)\n            score = acc\n\n        # Guardar métricas\n        self.epoch_metrics.append({\n            'epoch': epoch + 1,\n            'val_cat_loss': loss,\n            'val_cat_accuracy': acc\n        })\n\n        # Mostrar por consola\n        tag = \"MAE\" if self.regresion else \"Loss\"\n        print(f\"🐾 [Cat Val] {tag}: {loss:.4f} | Accuracy: {acc:.4f}\")\n\n        # Comprobamos mejora: primero por score, si empate por loss\n        improved = False\n        if score > self.best_score:\n            improved = True\n        elif score == self.best_score and loss < self.best_loss:\n            improved = True\n\n        # Si mejoró, guardamos modelo y actualizamos referencias\n        if improved:\n            self.best_score = score\n            self.best_loss  = loss\n            self.model.save(self.filepath)\n            print(f\"📦 Modelo mejorado guardado en {self.filepath}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:06.255102Z","iopub.execute_input":"2025-05-09T07:10:06.255401Z","iopub.status.idle":"2025-05-09T07:10:06.263972Z","shell.execute_reply.started":"2025-05-09T07:10:06.255378Z","shell.execute_reply":"2025-05-09T07:10:06.262990Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"from tensorflow.keras.callbacks import ModelCheckpoint\n\ndef get_callbacks(regression=False, cat_gen=None):\n  cat_val_cb = CatValidationCallback(cat_gen, regresion=regression)\n  \n\n  checkpoint_cb = ModelCheckpoint(\n    filepath='best_model.keras',\n    monitor='val_accuracy',         # nombre de la métrica a monitorizar\n    mode='max',                     # porque buscamos la mayor precisión\n    save_best_only=True,\n    save_weights_only=False,\n    verbose=1\n  )\n  checkpoint_cb_reg = ModelCheckpoint(\n    filepath='best_model.keras',\n    monitor='val_loss',\n    mode='min',\n    save_best_only=True,\n    save_weights_only=False,\n    verbose=1\n  )\n  if regression:\n    callbacks = [\n        EarlyStopping(patience=10, restore_best_weights=True),\n        ReduceLROnPlateau(factor=0.5, patience=5, verbose=1),\n        cat_val_cb,\n        checkpoint_cb_reg\n    ]\n  else:\n    callbacks = [\n        EarlyStopping(patience=10, restore_best_weights=True),\n        ReduceLROnPlateau(factor=0.5, patience=5, verbose=1),\n        cat_val_cb,\n        checkpoint_cb\n    ]\n  return callbacks\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:06.265253Z","iopub.execute_input":"2025-05-09T07:10:06.265548Z","iopub.status.idle":"2025-05-09T07:10:06.305334Z","shell.execute_reply.started":"2025-05-09T07:10:06.265526Z","shell.execute_reply":"2025-05-09T07:10:06.304542Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix, mean_absolute_error\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef _get_label_map(y_true, y_pred, generator=None, default_prefix='KL'):\n    \"\"\"\n    Genera label_map automáticamente.\n    - Si el generador tiene class_indices (clasificación Keras), los usa.\n    - Si no, extrae las clases únicas de y_true y y_pred.\n    - Si todo falla, crea labels 'KL 0', 'KL 1', ..., según número de clases.\n    \"\"\"\n    # Caso Keras classification_generator\n    if generator is not None and hasattr(generator, 'class_indices'):\n        # Ordenar por índice\n        sorted_items = sorted(generator.class_indices.items(), key=lambda x: x[1])\n        return [name for name, _ in sorted_items]\n    \n    # Extraer clases únicas\n    classes = np.unique(np.concatenate((y_true, y_pred)))\n    # Si son enteros consecutivos desde 0 a n-1\n    if np.array_equal(classes, np.arange(len(classes))):\n        return [f'{default_prefix} {i}' for i in classes]\n    # En caso de etiquetas no enteras o desordenadas\n    return [str(c) for c in classes]\n\ndef evaluate_classification(y_true, y_pred, label_map=None, digits=4, title_suffix=''):\n    \"\"\"\n    Reporte de clasificación + matriz de confusión.\n    \"\"\"\n    if label_map is None:\n        label_map = _get_label_map(y_true, y_pred)\n    # Reporte\n    print(classification_report(\n        y_true, y_pred,\n        target_names=label_map,\n        digits=digits\n    ))\n    # Matriz de confusión\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8,6))\n    sns.heatmap(\n        cm, annot=True, fmt='d', cmap='Blues',\n        xticklabels=label_map, yticklabels=label_map\n    )\n    plt.xlabel('Predicción')\n    plt.ylabel('Etiqueta verdadera')\n    if title_suffix:\n        plt.title(title_suffix)\n    plt.show()\n\ndef evaluate_model(model, regression, generator, label_map=None, digits=4):\n    \"\"\"\n    Elige el modo de evaluación y asegura que label_map siempre se resuelva.\n    \"\"\"\n    # Predicciones crudas\n    preds = model.predict(generator)\n    \n    if regression:\n        # Convertir a clases\n        if hasattr(generator, 'labels'):\n            y_true_cont = np.array(generator.labels).flatten()\n        else:\n            y_true_cont = np.array(generator.classes).flatten()\n        y_pred_cont = np.array(preds).flatten()\n        \n        # MAE\n        mae = mean_absolute_error(y_true_cont, y_pred_cont)\n        print(f\"Mean Absolute Error (MAE): {mae:.{digits}f}\\n\")\n\n        y_true_class = np.clip(np.round(y_true_cont).astype(int), 0, None)\n        y_pred_class = np.clip(np.round(y_pred_cont).astype(int), 0, None)\n        # Obtener label_map adaptado al rango observado\n        if label_map is None:\n            max_label = max(y_true_class.max(), y_pred_class.max())\n            label_map = [f'KL {i}' for i in range(max_label + 1)]\n        \n        evaluate_classification(\n            y_true=y_true_class,\n            y_pred=y_pred_class,\n            label_map=label_map,\n            digits=digits,\n        )\n    else:\n        # Clasificación softmax u otra salida multiclase\n        y_pred = np.argmax(preds, axis=1)\n        y_true = generator.classes\n        \n        if label_map is None:\n            label_map = _get_label_map(y_true, y_pred, generator=generator)\n        \n        evaluate_classification(\n            y_true=y_true,\n            y_pred=y_pred,\n            label_map=label_map,\n            digits=digits\n        )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:15:25.033318Z","iopub.execute_input":"2025-05-09T07:15:25.033607Z","iopub.status.idle":"2025-05-09T07:15:25.047111Z","shell.execute_reply.started":"2025-05-09T07:15:25.033586Z","shell.execute_reply":"2025-05-09T07:15:25.046229Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd\n\ndef get_datagen(\n    tarea: int,\n    path: str,\n    regression: bool = False,\n    IMG_SIZE: tuple = (224, 224),\n    BATCH_SIZE: int = 32,\n    SEED: int = 42,\n    augment: bool = False\n):\n    \"\"\"\n    Generador de imágenes para clasificación y regresión con distintos esquemas de tarea.\n\n    Parámetros:\n        tarea       – entero 0–5 que define esquema de etiquetas.\n        path        – ruta al directorio de imágenes (train/val/test u otro).\n        regression  – True para regresión (class_mode='raw'), False para clasificación.\n        IMG_SIZE    – tupla (alto, ancho).\n        BATCH_SIZE  – tamaño de lote.\n        SEED        – semilla aleatoria.\n        augment     – True para data augmentation (solo en entrenamiento).\n    \"\"\"\n    # Configurar DataGenerator\n    if augment:\n        datagen = ImageDataGenerator(\n            rescale=1./255,\n            rotation_range=10,\n            width_shift_range=0.1,\n            height_shift_range=0.1,\n            zoom_range=0.1,\n            horizontal_flip=True\n        )\n        shuffle = True\n    else:\n        datagen = ImageDataGenerator(rescale=1./255)\n        shuffle = False\n\n    # Cargar dataframe con tu función; label como float si regresión, str si clasificación\n    df = create_dataframe_from_directory(path, regression=regression)\n    if regression:\n        # Asegurar float\n        df['label'] = df['label'].astype(float)\n        return datagen.flow_from_dataframe(\n            dataframe=df,\n            directory=path,\n            x_col='filename',\n            y_col='label',\n            target_size=IMG_SIZE,\n            batch_size=BATCH_SIZE,\n            class_mode='raw',\n            shuffle=shuffle,\n            seed=SEED\n        )\n\n    # Clasificación: convertir labels a ints para procesar tareas\n    df_proc = df.copy()\n    df_proc['label'] = df_proc['label'].astype(int)\n\n    if tarea == 0:\n        # Multiclase original 0–4: no cambio\n        pass\n    elif tarea == 1:\n        # Clases {0,1,2} -> 0 ; {3,4} -> 1\n        df_proc['label'] = df_proc['label'].apply(lambda x: 0 if x in [0,1,2] else x)\n    elif tarea in [2,3,4,5]:\n        target = tarea - 1  # tarea=2->1, etc.\n        df_proc = df_proc[df_proc['label'].isin([0, target])]\n        df_proc['label'] = df_proc['label'].apply(lambda x: 1 if x == target else 0)\n    else:\n        raise ValueError(\"tarea debe ser un entero entre 0 y 5.\")\n\n    # Convertir a string para class_mode='categorical'\n    df_proc['label'] = df_proc['label'].astype(str)\n\n    # Generador de clasificación\n    return datagen.flow_from_dataframe(\n        dataframe=df_proc,\n        directory=path,\n        x_col='filename',\n        y_col='label',\n        target_size=IMG_SIZE,\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        shuffle=shuffle,\n        seed=SEED\n    )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:18.249404Z","iopub.execute_input":"2025-05-09T07:10:18.249782Z","iopub.status.idle":"2025-05-09T07:10:18.262163Z","shell.execute_reply.started":"2025-05-09T07:10:18.249753Z","shell.execute_reply":"2025-05-09T07:10:18.261115Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"## Experimentos a realizar\n\nNormal \n012-3-4\n0-1\n0-2\n0-3\n0-4","metadata":{}},{"cell_type":"code","source":"def small_cnn(num_classes = 5, regression=False):\n    activation = 'linear' if regression else 'softmax'\n    model = models.Sequential([\n        layers.Conv2D(16, (3,3), activation='relu',\n                      input_shape=(224,224,3)),\n        layers.MaxPooling2D(2,2),\n        layers.Flatten(),\n        layers.Dense(num_classes, activation='softmax')\n    ])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:21.160056Z","iopub.execute_input":"2025-05-09T07:10:21.160348Z","iopub.status.idle":"2025-05-09T07:10:21.165127Z","shell.execute_reply.started":"2025-05-09T07:10:21.160326Z","shell.execute_reply":"2025-05-09T07:10:21.164224Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"def cnn_mediana(num_classes, regression=False):\n    activation = 'linear' if regression else 'softmax'\n    model = models.Sequential([\n        # Primera capa convolucional\n        Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(224,224,3)),\n        MaxPooling2D((2, 2)),\n        # Segunda capa convolucional\n        Conv2D(64, (3, 3), activation='relu', padding='same'),\n        MaxPooling2D((2, 2)),\n        # Aplanamiento y capas densas\n        Flatten(),\n        Dense(128, activation='relu'),\n        Dense(num_classes, activation=activation)\n    ])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:10:21.442146Z","iopub.execute_input":"2025-05-09T07:10:21.442464Z","iopub.status.idle":"2025-05-09T07:10:21.447663Z","shell.execute_reply.started":"2025-05-09T07:10:21.442441Z","shell.execute_reply":"2025-05-09T07:10:21.446645Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"regression = True\ntarea = 0\nnum_classes = 5\nif regression:\n    num_classes = 1\nelif tarea == 1:\n    num_classes = 3\nelif tarea > 1:\n    num_classes = 2\n\nloss = 'mean_squared_error' if regression else 'categorical_crossentropy'\nmetrics = ['mae'] if regression else ['accuracy']\n\n# Generadores de datos (entrenamiento y validación)\ntrain_gen = get_datagen(tarea=tarea, path=train_dir, regression=regression, augment=True)\nval_gen   = get_datagen(tarea=tarea, path=val_dir,   regression=regression)\ncat_gen = get_datagen(tarea=tarea, path=cat_dir, regression=regression)\n\n\nmodel = cnn_mediana(num_classes, regression)\nmodel.compile(optimizer='adam',\n                  loss=loss,\n                  metrics=metrics)\ncallbacks=get_callbacks(regression, cat_gen)\nhistory = model.fit(\n    train_gen,\n    validation_data=val_gen,\n    epochs=1,\n    callbacks=callbacks\n)\n# Carga de pesos\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:11:46.926758Z","iopub.execute_input":"2025-05-09T07:11:46.927134Z","iopub.status.idle":"2025-05-09T07:13:14.219281Z","shell.execute_reply.started":"2025-05-09T07:11:46.927105Z","shell.execute_reply":"2025-05-09T07:13:14.218579Z"}},"outputs":[{"name":"stdout","text":"Found 5778 validated image filenames.\nFound 826 validated image filenames.\nFound 83 validated image filenames.\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 371ms/step - loss: 29.4389 - mae: 2.0041🐾 [Cat Val] MAE: 0.9433 | Accuracy: 0.3373\n📦 Modelo mejorado guardado en best_model_cat.keras\n\nEpoch 1: val_loss improved from inf to 1.42976, saving model to best_model.keras\n\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 440ms/step - loss: 29.3175 - mae: 2.0000 - val_loss: 1.4298 - val_mae: 1.0420 - learning_rate: 0.0010\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# Carga de pesos\nmodel.load_weights('best_model.keras')\n# Obtén el diccionario original {etiqueta_str: índice_entero}\nevaluate_model(model, regression=regression, generator=val_gen)\nmodel.load_weights('best_model_cat.keras')\nevaluate_model(model, regression=regression, generator=cat_gen)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T07:15:31.124820Z","iopub.execute_input":"2025-05-09T07:15:31.125252Z","iopub.status.idle":"2025-05-09T07:15:40.907297Z","shell.execute_reply.started":"2025-05-09T07:15:31.125222Z","shell.execute_reply":"2025-05-09T07:15:40.906219Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 74ms/step\nMean Absolute Error (MAE): 1.0420\n\n              precision    recall  f1-score   support\n\n        KL 0     0.3333    0.0061    0.0120       328\n        KL 1     0.1794    0.8889    0.2986       153\n        KL 2     0.0806    0.0236    0.0365       212\n        KL 3     0.0000    0.0000    0.0000       106\n        KL 4     0.0000    0.0000    0.0000        27\n\n    accuracy                         0.1731       826\n   macro avg     0.1187    0.1837    0.0694       826\nweighted avg     0.1863    0.1731    0.0694       826\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 71ms/step\nMean Absolute Error (MAE): 0.9433\n\n              precision    recall  f1-score   support\n\n        KL 0     0.0000    0.0000    0.0000        22\n        KL 1     0.3500    0.9333    0.5091        30\n        KL 2     0.0000    0.0000    0.0000        18\n        KL 3     0.0000    0.0000    0.0000        11\n        KL 4     0.0000    0.0000    0.0000         2\n\n    accuracy                         0.3373        83\n   macro avg     0.0700    0.1867    0.1018        83\nweighted avg     0.1265    0.3373    0.1840        83\n\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":23},{"cell_type":"markdown","source":"# Anterior","metadata":{}},{"cell_type":"markdown","source":"## Exploración del dataset de artrosis de rodilla\n\n- **Total de imágenes:** 9 786\n\n| Partición      | Imágenes | Porcentaje |\n|---------------|---------:|-----------:|\n| **Train**      | 5 778    | 59.04 %    |\n| **Validation** |   826    |  8.44 %    |\n| **Test**       | 1 656    | 16.92 %    |\n| **AutoTest**   | 1 526    | 15.59 %    |\n\n\n### Distribución de clases en `Train`\n\n|  Clase  | Índice | Imágenes | Porcentaje |\n|---------|-------:|---------:|-----------:|\n| Sin     |      0 |    2 286 |     39.56 % |\n| Ligera  |      1 |    1 046 |     18.10 % |\n| Leve    |      2 |    1 516 |     26.24 % |\n| Moderada|      3 |      757 |     13.10 % |\n| Severa  |      4 |      173 |      2.99 % |\n\n","metadata":{}}]}